{
  "tocApiTitle": "Web Protocol",
  "tocConfigurationTitle": "Configuration",
  "tocAttributesTitle": "Attributes",
  "tocProcessorTitle": "Processors",
  "tocMapLayerTitle": "Map Layers",
  "tocStyleTitle": "Vector Styles",
  "tocOutputFormatsTitle": "Output Formats",
  "tocFileLoadersTitle": "File Loaders",
  "tocOverview": "Overview",
  "tocJasperReports": "Jasper Reports",
  "tocDownloads": "Downloads",
  "inputParamTitle": "Input Parameters:",
  "outputParamTitle": "Output Parameters:",
  "jsonParamTitle": "Json Paramaters:",
  "headerTitle": "Mapfish Print Documentation",
  "contentsTitle": "Contents",
  "configuration" : "Configuration",
  "configurationDescription": "Configuration elements are to be put in the config.yaml",
  "tocProcessorsDesc" : "<p>    This page lists all the <em>processors </em> available in the Mapfish distribution. The documentation consists of several parts: <ul>    <li>Summary: all the processors are listed with the name/id and a short description of the processor. The name is the value that is        put in the config file when configuring Mapfish Print.    </li>    <li>Description: the full description for each processor can be found by expanding one of the list elements.</li>    <li>Configuration: the configuration options are also listed when a processor element is expanded. A configuration option is a value        that can be set on the processor in the configuration yaml file. These options are consistent across all print jobs because they        are not provided by the client.    </li>    <li>Input: the required input values of the processor are listed when the processor element is in expanded form. Input values are        either <a href=\"#/attributes\">attributes </a> or the output values of other processors.    </li>    <li>Output: the output values of the processors are also listed when a processor element is expanded. As the name implies, the output        values are the data the processor produces and is the input of other processors or the input parameters of the outputFormat        template    </li> </ul> </p> A processor's main responsibility is to take the <a        href=\"#/attributes\">attributes </a> for the print job and producing the parameters required by the <a href=\"outputFormat\">    outputFormat</a> to produce the report. <p>    While many processors are responsible for directly producing the parameters required by the <a href=\"outputFormat\"> outputFormat</a>,    some processors be considered <em>support</em> processors. A support processor is a processor that in some way prepares attributes for    for the </em>primary</em> processors. For example, there are processors that can add layers to the map so that all maps will have the    layers (reducing the data the client needs to send.) Another example are several processors which configure how http requests are make    (add cookies, headers, remap URLs, etc...) </p> <p>    A processor usually has inputs and outputs, in the simple case an input is one of the attributes and the outputs all map to parameters    in the Jasper template. Each input and output have default names and often these are sufficient. </p> <p>    However consider the case where a report had two maps (or legends or....). In this case the default input and output parameter names    are not sufficient because the input attributes need to be mapped to the correct processor and the output values need to be mapped to    the correct parameters in the templates. In order to account for this case, processors have the configuration options: inputMapper and    outputMapper. </p> <p>    InputMapper and outputMapper configuration parameters can be configured as follows: <pre> - !createMap<br/>    inputMapper: { attributeName : defaultInputParamName}<br/>    outputMapper: { defaultOutputName : templateParamName}<br/> </pre> Or if the there are multiple mappings that need to be made : <pre> - processorName<br/>    inputMapper :<br/>    attributeName1 : inputName1<br/>    attributeName2 : inputName2<br/> </pre> ",
  "tocAttributesDesc" : "<p>    An Attribute is a value that a processor requires as its input (if it is not satisfied by the output of another processor) or the    report template. An attribute represents one or more values. Usually simple values (numbers, strings, etc...) are values required by    the report template but on occasion they might be required by a processor. Typically a processor will require a specific attribute    type, for example the <a href=\"#/processors#!createMap\">!createMap</a> processor requires a <a href=\"#/attributes#!map\">!map</a>    attribute, which contains all of the information required to render a map (layers, bbox, projections, etc...) </p><p>    Attributes are declared in the configuration yaml file in the !attribute block. The    attribute block is a map of name - > attributeType pairs. This means that each attribute consists of a name and a type. Each processor    has a inputs which must be satisfied by an attribute or the output of another processor. Each input has a name/key that is used to    look up the attribute (or output). If an input of a processor is not satisfied, an error will be reported to the client detailing the    attribute(s) that are missing. </p><p>    All attributes can have a <em>default</em> block where the values of the attribute can be supplied. As the term implies, an attribute    with default values does not need to be supplied by the client (although they can be overridden). Further, if an attribute has    multiple values the default block may only provide defaults for a subset of the values (the client must supply the rest). </p><p>    Defaults provide a way to make the API the client must use to be very simple (when designing a custom client) but remain flexible. </p><p>  <strong>Example</strong> </p><p>  <code>config.yaml</code>  <pre> templates:<br>  A4 portrait: !template<br>    reportTemplate: simpleReport.jrxml<br>    attributes:<br>      number: !integer {}<br>      title: !string {}<br>      description: !string {}<br>      map: !map<br>        height: 200<br>        width: 400  </pre> </p><p>  <code>request.json</code>  <pre> {<br>    \"layout\": \"A4 portrait\",<br>    \"outputFormat\": \"pdf\",<br>    \"attributes\": {<br>        \"number\": 45,<br>        \"name\": \"The map\",<br>        \"description\": \"A map showing...\"<br>        },<br>        \"map\": {<br>          \"bbox\": [100, -1, 106, 2],<br>          \"projection\": \"CRS:84\",<br>          \"dpi\": 72,<br>          ...<br>        }<br>    }<br> }  </pre> </p>",
  "overviewPageArchitectureExplanation" : "<p>    On the server side, once a create request is received the server will create a Print Job and send it to Job Manager, which is    responsible for running the print job asynchronously (possibly on a completely different server) and allowing the http request to    return a response to the user without waiting for the print job to complete. As an aside, there is a createAndGet request that will    wait until the printing is done and directly return the report without having to poll to see if the print is done. This is a    convenience for client makers. </p> <p>    While creating the Print Job all of the <a href=\"#/attributes\">attributes</a> are parsed from the JSON and a Job Reference Id is    generated to uniquely identify the job is create. </p> <p>    Once the Print Job is started, the <a href=\"#/attributes\">attributes</a> are passed to the <a href=\"#/processors\">processors</a>. The    processors work with the <a href=\"#/attributes\">attributes</a> in order to generate the maps, tables, legends, etc... that are required    by the <a href=\"#/outputFormats\">output format</a> (Jasper template). </p> <p>    Once the <a href=\"#/processors\">processors</a> have all completed execution all of the values are passed to the <a        href=\"#/outputFormats\">output format</a> which uses that information to generate the report. In theory an <a href=\"#/outputFormats\">output    format</a> could be anything that generates a report. However the current version uses the    <a href=\"http://community.jaspersoft.com/project/jasperreports-library\">Jasper Reports Library</a> for its outputs and several of the    processors are Jasper reports focuses.    Because of this the documentation will assume that the output format is always based on    <a href=\"http://community.jaspersoft.com/project/jasperreports-library\">Jasper Reports</a>. </p> <p>    The <a href=\"#/outputFormats\">output format</a> will generate a report and store it in some way for later retrieval. At this point the    status request would return a response indicating that the print job has completed. </p> ",
  "tocFileLoadersDesc" : "Plugins to load config resources.",
  "overviewPageArchitecturalDiagramPostInfo" : "This diagram illustrates how a client (web-client or Java application) communicates with the Mapfish Print Server.  In the case of a Java application the communication is directly with the Java Servlet Object and for web-client via http requests.  The protocol consists of several requests, only a few of which are shown in the diagram.  For the full list of requests see: <a href=\"#/API\">Web Protocol</a>. ",
  "tocStyleDesc" : "TODO: Fill in description",
  "clientSequenceDescription" : "The typical request sequence a client will make is as follows: <ul>    <li>        If the client is a generic client, the client will make a capabilities request in order to obtain information about the required <a href=\"#/attributes\">attributes</a> needed to be sent to the server.    </li>    <li>        Next the create request will be made and all the <a href=\"#/attributes\">attributes</a> (the data required in order to print the report) are sent to the server.  The server will return a reference ID of the print job for obtaining the report and the status    </li>    <li>        Once the create request returns the client will poll the server asking about the status of the print.    </li>    <li>        Once the status request returns the completion response (and not an error) then the client will make the GET report request.    </li> </ul> ",
  "overviewPageBasicDescription" : "The purpose of Mapfish Print is to create reports that contain maps (and map related components) within them. <p>    The project is a Java based servlet/library/application based on the mature    <a href=\"http://community.jaspersoft.com/project/jasperreports-library\">Jasper Reports Library</a>. </p> <p>    Mapfish print has the following distributions: <ul>    <li>        The most commonly used distribution is the <em>war</em> distribution where Mapfish Print is a servlet and can be ran in a        Servlet container like <a href=\"http://tomcat.apache.org/\">Apache Tomcat</a>.    </li>    <li>        Mapfish print is also distributed as a Java <em>jar</em> which allows Mapfish print to be used like a normal Java library, or        embedded in an existing Java web application as an addition servlet.    </li>    <li>        The Java <em>war</em> is also packaged as a debian package.    </li>    <li>        The last distribution is an command-line application where the reports can be generated via command line.  This is useful for        debugging configurations and requests.    </li> </ul> </p> ",
  "overviewPageArchitecturalDiagramPreamble" : "The (much simplified) architecture of Mapfish Print is as follows: ",
  "tocOutputFormatsDesc" : "Available output formats.",
  "tocMapLayerDesc" : "The map layers are the geospatial data types supported by Mapfish Print. Map layers are typically defined in the request JSON as part of the map attribute. Since map layers are essentially attribute data specific to the map attribute, they follow the same pattern as all other attributes in that they have attribute values. <p>    The documentation below describes each map layer listing its required and optional attributes. Here is an example of a map    attribute with map layers defined. </p> <p>  <strong>Example <code>request.json</code></strong> </p><p>  <pre> {<br>  \"attributes\": {<br>    \"map\": {<br>      \"layers\": [<br>        {<br>          \"geoJson\": \"http://host.org/data.geojson\",<br>          \"type\": \"geojson\"<br>        },<br>        {<br>          \"baseURL\": \"http://host.org/tiles\",<br>          \"type\": \"OSM\",<br>          \"imageExtension\": \"png\"<br>        }<br>      ],<br>      \"projection\": \"EPSG:900913\",<br>      \"dpi\": 128,<br>      \"scale\": 100000,<br>      \"center\": [<br>        -8233518.5005945,<br>        4980320.4059228<br>      ]<br>    }<br>  },<br>  \"layout\": \"A4 landscape\"<br> }  </pre> </p>",
  "tocConfigurationDesc" : "<p>This section lists the available configuration components that can be used in the YAML configuration file.</p> <p>  <strong>Example <code>config.yaml</code></strong> </p><p>  <pre> throwErrorOnExtraParameters: true<br> <br> certificateStore: !certificateStore<br>  ...<br> <br> credentials:<br>  - !credential<br>    ...<br> <br> proxies:<br>  - !proxy<br>    ...<br> <br> templates:<br>  A4 Landscape: !template<br>    ...<br>  </pre> </p>",
  "record/ Tiled Wms Layer/title" : " Tiled Wms Layer",
  "record/ Tiled Wms Layer/desc" : "<div class=\"block\">The Plugin for creating WMTS layers.</div>",
  "record/ Tiled Wms Layer/summaryDesc" : "The Plugin for creating WMTS layers",
  "record/ Tiled Wms Layer/input/styles/desc" : "<div class=\"block\">The styles to apply to the layers.  If this is defined there should be the same number as the layers and the style are applied  to the layer in the <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/image/wms/WmsLayerParam.html#layers\"><code>layers</code></a> field.</div>",
  "record/ Tiled Wms Layer/input/baseURL/desc" : "<div class=\"block\">The base URL for the WMS.  Used for making WMS requests.</div>",
  "record/ Tiled Wms Layer/input/name/desc" : "<div class=\"block\">The name of the layer.</div>",
  "record/ Tiled Wms Layer/input/version/desc" : "<div class=\"block\">The WMS version to use when making requests.</div>",
  "record/ Tiled Wms Layer/input/serverType/desc" : "<div class=\"block\">The server type (\"mapserver\", \"geoserver\" or \"qgisserver\"). By specifying the server type   vendor specific parameters (like for the DPI value) can be used when making the request.</div>",
  "record/ Tiled Wms Layer/input/customParams/desc" : "<div class=\"block\">Custom query parameters to use when making http requests.  These are related to <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/AbstractWMXLayerParams.html#mergeableParams\"><code>mergeableParams</code></a> except they  are the parameters that will prevent two layers from the same server from being merged into a single request with both  layers. See <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/AbstractWMXLayerParams.html#mergeableParams\"><code>mergeableParams</code></a> for a more detailed example of the difference between <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/AbstractWMXLayerParams.html#mergeableParams\"><code>mergeableParams</code></a> and  <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/AbstractWMXLayerParams.html#customParams\"><code>customParams</code></a>.  <p></p>  The json should look something like:  <pre><code><br> {<br>     \"param1Name\": \"value\",<br>     \"param2Name\": [\"value1\", \"value2\"]<br> }<br> </code></pre></div>",
  "record/ Tiled Wms Layer/input/mergeableParams/desc" : "<div class=\"block\">Custom query parameters that can be merged if multiple layers are merged together into a single request.  <p></p>  The json should look something like:  <pre><code><br> {<br>     \"param1Name\": \"value\",<br>     \"param2Name\": [\"value1\", \"value2\"]<br> }<br> </code></pre><p></p>  For example in WMS the style parameter can be merged.  If there are several wms layers that can be merged  except they have different style parameters they can be merged because the style parameter can be merged.  <p></p>  Compare that to DPI parameter (for QGIS wms mapserver).  if two layers have different DPI then the layers  cannot be merged.  In this case the DPI should <em>NOT</em> be one of the <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/AbstractWMXLayerParams.html#mergeableParams\"><code>mergeableParams</code></a> it should  be one of the <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/AbstractWMXLayerParams.html#customParams\"><code>customParams</code></a>.</div>",
  "record/ Tiled Wms Layer/input/opacity/desc" : "<div class=\"block\">The opacity of the image.</div>",
  "record/ Tiled Wms Layer/input/layers/desc" : "<div class=\"block\">The wms layer to request in the GetMap request.  The order is important.  It is the order that they will appear in the  request.   As with the WMS specification, the first layer will be the first layer drawn on the map (the bottom/base layer) of the map.  This  means that layer at position 0 in the array will covered by layer 1 (where not transparent) and so on.</div>",
  "record/ Tiled Wms Layer/input/imageFormat/desc" : "<div class=\"block\">The format of the image. for example image/png, image/jpeg, etc...</div>",
  "record/ Tiled Wms Layer/input/useNativeAngle/desc" : "<div class=\"block\">If true transform the map angle to customParams.angle for GeoServer, and customParams.map_angle for MapServer.</div>",
  "record/ Tiled Wms Layer/input/tileSize/desc" : "<div class=\"block\">A two element array of integers indicating the x and y size of each tile.</div>",
  "record/ Tiled Wms Layer/input/rasterStyle/desc" : "<div class=\"block\">The name of the style (in Configuration or Template) to use when drawing the layer to the map.  This is separate from  the style in that it indicates how to draw the map.  It allows one to apply any of the SLD raster styling.</div>",
  "record/ Tiled Wms Layer/input/failOnError/desc" : "<div class=\"block\">Fail if a tile return an error.</div>",
  "record/WMTS Layer/title" : "WMTS Layer",
  "record/WMTS Layer/desc" : "<div class=\"block\">The Plugin for creating WMTS layers.</div>",
  "record/WMTS Layer/summaryDesc" : "The Plugin for creating WMTS layers",
  "record/WMTS Layer/input/style/desc" : "<div class=\"block\">The style name (for styles on the WMTS server).</div>",
  "record/WMTS Layer/input/matrices/desc" : "<div class=\"block\">Array of matrix ids.  <p></p>  Example:  <pre><code><br> [{<br>   \"identifier\": \"0\",<br>   \"matrixSize\": [1, 1],<br>   \"scaleDenominator\": 4000,<br>   \"tileSize\": [256, 256],<br>   \"topLeftCorner\": [420000, 350000]<br>   }, ...]<br> </code></pre></div>",
  "record/WMTS Layer/input/name/desc" : "<div class=\"block\">The name of the layer.</div>",
  "record/WMTS Layer/input/customParams/desc" : "<div class=\"block\">Custom query parameters to use when making http requests.  These are related to <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/AbstractWMXLayerParams.html#mergeableParams\"><code>mergeableParams</code></a> except they  are the parameters that will prevent two layers from the same server from being merged into a single request with both  layers. See <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/AbstractWMXLayerParams.html#mergeableParams\"><code>mergeableParams</code></a> for a more detailed example of the difference between <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/AbstractWMXLayerParams.html#mergeableParams\"><code>mergeableParams</code></a> and  <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/AbstractWMXLayerParams.html#customParams\"><code>customParams</code></a>.  <p></p>  The json should look something like:  <pre><code><br> {<br>     \"param1Name\": \"value\",<br>     \"param2Name\": [\"value1\", \"value2\"]<br> }<br> </code></pre></div>",
  "record/WMTS Layer/input/mergeableParams/desc" : "<div class=\"block\">Custom query parameters that can be merged if multiple layers are merged together into a single request.  <p></p>  The json should look something like:  <pre><code><br> {<br>     \"param1Name\": \"value\",<br>     \"param2Name\": [\"value1\", \"value2\"]<br> }<br> </code></pre><p></p>  For example in WMS the style parameter can be merged.  If there are several wms layers that can be merged  except they have different style parameters they can be merged because the style parameter can be merged.  <p></p>  Compare that to DPI parameter (for QGIS wms mapserver).  if two layers have different DPI then the layers  cannot be merged.  In this case the DPI should <em>NOT</em> be one of the <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/AbstractWMXLayerParams.html#mergeableParams\"><code>mergeableParams</code></a> it should  be one of the <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/AbstractWMXLayerParams.html#customParams\"><code>customParams</code></a>.</div>",
  "record/WMTS Layer/input/opacity/desc" : "<div class=\"block\">The opacity of the image.</div>",
  "record/WMTS Layer/input/dpi/desc" : "<div class=\"block\">The dpi of the returned images.  <p></p>  By default this is the OGC default DPI.</div>",
  "record/WMTS Layer/input/matrixSet/desc" : "<div class=\"block\">Reference/Identifier to a tileMatrixSet and limits.</div>",
  "record/WMTS Layer/input/dimensions/desc" : "<div class=\"block\">The \"sample\" dimensions or image color bands to retrieve.  <p></p>  This can be null, if so then the default dimensions will be returned.  If specified they must be dimensions supported by the server.  <p></p>  These are keys to the <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/wmts/WMTSLayerParam.html#dimensionParams\"><code>dimensionParams</code></a>.</div>",
  "record/WMTS Layer/input/imageFormat/desc" : "<div class=\"block\">The format of the image. for example image/png, image/jpeg, etc...</div>",
  "record/WMTS Layer/input/version/desc" : "<div class=\"block\">The WMTS protocol version to use.</div>",
  "record/WMTS Layer/input/requestEncoding/desc" : "<div class=\"block\">The way to make the requests. Either <code>KVP</code> or <code>REST</code> (default).</div>",
  "record/WMTS Layer/input/rasterStyle/desc" : "<div class=\"block\">The name of the style (in Configuration or Template) to use when drawing the layer to the map.  This is separate from  the style in that it indicates how to draw the map.  It allows one to apply any of the SLD raster styling.</div>",
  "record/WMTS Layer/input/baseURL/desc" : "<div class=\"block\">The ‘ResourceURL’ available in the WMTS capabilities.  <p></p>  Example (for <code>requestEncoding: \"KVP\"</code>):  <pre><code><br> baseUrl: \"http://domain.com/wmts\"<br> </code></pre><p></p>  Example (for <code>requestEncoding: \"REST\"</code>):  <pre><code><br> baseUrl: \"http://domain.com/wmts/roads/{TileMatrixSet}/{TileMatrix}/{TileCol}/{TileRow}.png\"<br> </code></pre>  The following URL template variables are replaced:  <ul><li>{Layer}</li><li>{style}</li><li>{TileMatrixSet}</li><li>{TileMatrix}</li><li>{TileRow}</li><li>{TileCol}</li><li>{[DIMENSION.IDENTIFIER]}</li></ul></div>",
  "record/WMTS Layer/input/layer/desc" : "<div class=\"block\">The layer name.</div>",
  "record/WMTS Layer/input/dimensionParams/desc" : "<div class=\"block\">Dictionary of dimensions name (Must be uppercase) => value.</div>",
  "record/WMTS Layer/input/failOnError/desc" : "<div class=\"block\">Fail if a tile return an error.</div>",
  "record/ Geotiff Layer/title" : " Geotiff Layer",
  "record/ Geotiff Layer/desc" : "<div class=\"block\">Parser for creating <a title=\"class in org.mapfish.print.map.geotools\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/geotools/GeotiffLayer.html\"><code>GeotiffLayer</code></a> layers from request data.</div>",
  "record/ Geotiff Layer/summaryDesc" : "Parser for creating GeotiffLayer layers from request data",
  "record/ Geotiff Layer/input/url/desc" : "<div class=\"block\">The url of the geotiff.  It can be a file but if it is the file must be contained within the config directory.</div>",
  "record/ Geotiff Layer/input/name/desc" : "<div class=\"block\">The name of the layer.</div>",
  "record/ Geotiff Layer/input/style/desc" : "<div class=\"block\">A string identifying a style to use when rendering the raster.</div>",
  "record/ Geotiff Layer/input/opacity/desc" : "<div class=\"block\">The opacity of the image.</div>",
  "record/ Geotiff Layer/input/failOnError/desc" : "<div class=\"block\">Fail if a tile return an error.</div>",
  "record/ Wms Layer/title" : " Wms Layer",
  "record/ Wms Layer/desc" : "<div class=\"block\">Layer plugin factory for creating WMS layers.</div>",
  "record/ Wms Layer/summaryDesc" : "Layer plugin factory for creating WMS layers",
  "record/ Wms Layer/input/styles/desc" : "<div class=\"block\">The styles to apply to the layers.  If this is defined there should be the same number as the layers and the style are applied  to the layer in the <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/image/wms/WmsLayerParam.html#layers\"><code>layers</code></a> field.</div>",
  "record/ Wms Layer/input/baseURL/desc" : "<div class=\"block\">The base URL for the WMS.  Used for making WMS requests.</div>",
  "record/ Wms Layer/input/name/desc" : "<div class=\"block\">The name of the layer.</div>",
  "record/ Wms Layer/input/version/desc" : "<div class=\"block\">The WMS version to use when making requests.</div>",
  "record/ Wms Layer/input/serverType/desc" : "<div class=\"block\">The server type (\"mapserver\", \"geoserver\" or \"qgisserver\"). By specifying the server type   vendor specific parameters (like for the DPI value) can be used when making the request.</div>",
  "record/ Wms Layer/input/customParams/desc" : "<div class=\"block\">Custom query parameters to use when making http requests.  These are related to <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/AbstractWMXLayerParams.html#mergeableParams\"><code>mergeableParams</code></a> except they  are the parameters that will prevent two layers from the same server from being merged into a single request with both  layers. See <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/AbstractWMXLayerParams.html#mergeableParams\"><code>mergeableParams</code></a> for a more detailed example of the difference between <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/AbstractWMXLayerParams.html#mergeableParams\"><code>mergeableParams</code></a> and  <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/AbstractWMXLayerParams.html#customParams\"><code>customParams</code></a>.  <p></p>  The json should look something like:  <pre><code><br> {<br>     \"param1Name\": \"value\",<br>     \"param2Name\": [\"value1\", \"value2\"]<br> }<br> </code></pre></div>",
  "record/ Wms Layer/input/mergeableParams/desc" : "<div class=\"block\">Custom query parameters that can be merged if multiple layers are merged together into a single request.  <p></p>  The json should look something like:  <pre><code><br> {<br>     \"param1Name\": \"value\",<br>     \"param2Name\": [\"value1\", \"value2\"]<br> }<br> </code></pre><p></p>  For example in WMS the style parameter can be merged.  If there are several wms layers that can be merged  except they have different style parameters they can be merged because the style parameter can be merged.  <p></p>  Compare that to DPI parameter (for QGIS wms mapserver).  if two layers have different DPI then the layers  cannot be merged.  In this case the DPI should <em>NOT</em> be one of the <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/AbstractWMXLayerParams.html#mergeableParams\"><code>mergeableParams</code></a> it should  be one of the <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/tiled/AbstractWMXLayerParams.html#customParams\"><code>customParams</code></a>.</div>",
  "record/ Wms Layer/input/opacity/desc" : "<div class=\"block\">The opacity of the image.</div>",
  "record/ Wms Layer/input/layers/desc" : "<div class=\"block\">The wms layer to request in the GetMap request.  The order is important.  It is the order that they will appear in the  request.   As with the WMS specification, the first layer will be the first layer drawn on the map (the bottom/base layer) of the map.  This  means that layer at position 0 in the array will covered by layer 1 (where not transparent) and so on.</div>",
  "record/ Wms Layer/input/imageFormat/desc" : "<div class=\"block\">The format of the image. for example image/png, image/jpeg, etc...</div>",
  "record/ Wms Layer/input/useNativeAngle/desc" : "<div class=\"block\">If true transform the map angle to customParams.angle for GeoServer, and customParams.map_angle for MapServer.</div>",
  "record/ Wms Layer/input/rasterStyle/desc" : "<div class=\"block\">The name of the style (in Configuration or Template) to use when drawing the layer to the map.  This is separate from  the style in that it indicates how to draw the map.  It allows one to apply any of the SLD raster styling.</div>",
  "record/ Wms Layer/input/failOnError/desc" : "<div class=\"block\">Fail if a tile return an error.</div>",
  "record/ Feature Layer/title" : " Feature Layer",
  "record/ Feature Layer/desc" : "<div class=\"block\">Parser for creating <a title=\"class in org.mapfish.print.map.geotools\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/geotools/FeatureLayer.html\"><code>FeatureLayer</code></a> layers from request data.</div>",
  "record/ Feature Layer/summaryDesc" : "Parser for creating FeatureLayer layers from request data",
  "record/ Feature Layer/detail/Parser/desc" : "<div></div>",
  "record/ Feature Layer/input/style/desc" : "<div class=\"block\">The style name of a style to apply to the features during rendering.  The style name must map to a style in the  template or the configuration objects.  <p></p>  If no style is defined then the default style for the geometry type will be used.</div>",
  "record/ Feature Layer/input/name/desc" : "<div class=\"block\">The name of the layer.</div>",
  "record/ Feature Layer/input/defaultStyle/desc" : "<div class=\"block\">If no style is defined, a default style with this name will be used. Otherwise  a style will be selected depending on the the geometry type.</div>",
  "record/ Feature Layer/input/opacity/desc" : "<div class=\"block\">The opacity of the image.</div>",
  "record/ Feature Layer/input/features/desc" : "<div class=\"block\">A collection of features.</div>",
  "record/ Feature Layer/input/renderAsSvg/desc" : "<div class=\"block\">Indicates if the layer is rendered as SVG.  <p></p>  (will default to <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/config/Configuration.html#defaultStyle\"><code>Configuration.defaultStyle</code></a>).</div>",
  "record/ Feature Layer/input/failOnError/desc" : "<div class=\"block\">Fail if a tile return an error.</div>",
  "record/ Grid Layer/title" : " Grid Layer",
  "record/ Grid Layer/desc" : "<div class=\"block\">The plugin for creating the grid layer.</div>",
  "record/ Grid Layer/summaryDesc" : "The plugin for creating the grid layer",
  "record/ Grid Layer/detail/Parser/desc" : "<div></div>",
  "record/ Grid Layer/input/pointsInLine/desc" : "<div class=\"block\">The number of points that will be in the grid line.  If the line will be curved (for certain projections) then the more  points the smoother the curve.  <p></p>  The default number of points is .</div>",
  "record/ Grid Layer/input/name/desc" : "<div class=\"block\">The name of the layer.</div>",
  "record/ Grid Layer/input/style/desc" : "<div class=\"block\">The style name of a style to apply to the features during rendering.  The style name must map to a style in the  template or the configuration objects.  <p></p>  If no style is defined then the default grid style will be used.  <p></p>  The feature for the grid will have a line geometry and will have the following attributes:  <ul><li><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/Constants.Style.Grid.html#ATT_ROTATION\">\"rotation\"</a> -- the rotation for a label that is perpendicular          to the line      </li><li><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/Constants.Style.Grid.html#ATT_LABEL\">\"label\"</a> -- The suggested text of the label      </li><li><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/Constants.Style.Grid.html#ATT_X_DISPLACEMENT\">\"xDisplacement\"</a> -- The x-displacement of one of the labels (might          be top or left) the unit is pixels.      </li><li><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/Constants.Style.Grid.html#ATT_Y_DISPLACEMENT\">\"yDisplacement\"</a> -- The y-displacement of one of the labels (might          be top or left) the unit is pixels.      </li></ul></div>",
  "record/ Grid Layer/input/numberOfLines/desc" : "<div class=\"block\">The x,y number of grid lines.  <p></p>  The x is the number of lines that run vertically along the page.</div>",
  "record/ Grid Layer/input/renderAsSvg/desc" : "<div class=\"block\">Indicates if the layer is rendered as SVG.  <p></p>  (will default to <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/config/Configuration.html#defaultStyle\"><code>Configuration.defaultStyle</code></a>).</div>",
  "record/ Grid Layer/input/origin/desc" : "<div class=\"block\">The x,y point of grid origin.  <p></p>  This is required if <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/geotools/grid/GridParam.html#spacing\"><code>spacing</code></a> is defined.</div>",
  "record/ Grid Layer/input/spacing/desc" : "<div class=\"block\">The x,y spacing between grid lines.  <p></p>  Either <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/geotools/grid/GridParam.html#spacing\"><code>spacing</code></a> or <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/geotools/grid/GridParam.html#numberOfLines\"><code>numberOfLines</code></a><p></p>  If spacing is defined then <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/geotools/grid/GridParam.html#origin\"><code>origin</code></a> must also be defined</div>",
  "record/ Grid Layer/input/opacity/desc" : "<div class=\"block\">The opacity of the image.</div>",
  "record/ Grid Layer/input/failOnError/desc" : "<div class=\"block\">Fail if a tile return an error.</div>",
  "record/ Geo Json Layer/title" : " Geo Json Layer",
  "record/ Geo Json Layer/desc" : "<div class=\"block\">Parser for creating <a title=\"class in org.mapfish.print.map.geotools\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/geotools/GeoJsonLayer.html\"><code>GeoJsonLayer</code></a> layers from request data.</div>",
  "record/ Geo Json Layer/summaryDesc" : "Parser for creating GeoJsonLayer layers from request data",
  "record/ Geo Json Layer/detail/Parser/desc" : "<div></div>",
  "record/ Geo Json Layer/input/name/desc" : "<div class=\"block\">The name of the layer.</div>",
  "record/ Geo Json Layer/input/style/desc" : "<div class=\"block\">The style name of a style to apply to the features during rendering.  The style name must map to a style in the  template or the configuration objects.  <p></p>  If no style is defined then the default style for the geometry type will be used.</div>",
  "record/ Geo Json Layer/input/renderAsSvg/desc" : "<div class=\"block\">Indicates if the layer is rendered as SVG.  <p></p>  (will default to <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/config/Configuration.html#defaultStyle\"><code>Configuration.defaultStyle</code></a>).</div>",
  "record/ Geo Json Layer/input/opacity/desc" : "<div class=\"block\">The opacity of the image.</div>",
  "record/ Geo Json Layer/input/geoJson/desc" : "<div class=\"block\">A geojson formatted string or url to the geoJson or the raw GeoJSON data.  <p></p>  The url can be a file url, however if it is it must be relative to the configuration directory.</div>",
  "record/ Geo Json Layer/input/failOnError/desc" : "<div class=\"block\">Fail if a tile return an error.</div>",
  "record/ Gml Layer/title" : " Gml Layer",
  "record/ Gml Layer/desc" : "<div class=\"block\">Parser for creating <a title=\"class in org.mapfish.print.map.geotools\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/map/geotools/GmlLayer.html\"><code>GmlLayer</code></a> layers from request data.</div>",
  "record/ Gml Layer/summaryDesc" : "Parser for creating GmlLayer layers from request data",
  "record/ Gml Layer/detail/Parser/desc" : "<div></div>",
  "record/ Gml Layer/input/name/desc" : "<div class=\"block\">The name of the layer.</div>",
  "record/ Gml Layer/input/url/desc" : "<div class=\"block\">A url to the gml or the raw Gml data.  <p></p>  The url can be a file url, however if it is it must be relative to the configuration directory.</div>",
  "record/ Gml Layer/input/style/desc" : "<div class=\"block\">The style name of a style to apply to the features during rendering.  The style name must map to a style in the  template or the configuration objects.  <p></p>  If no style is defined then the default style for the geometry type will be used.</div>",
  "record/ Gml Layer/input/renderAsSvg/desc" : "<div class=\"block\">Indicates if the layer is rendered as SVG.  <p></p>  (will default to <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/config/Configuration.html#defaultStyle\"><code>Configuration.defaultStyle</code></a>).</div>",
  "record/ Gml Layer/input/opacity/desc" : "<div class=\"block\">The opacity of the image.</div>",
  "record/ Gml Layer/input/failOnError/desc" : "<div class=\"block\">Fail if a tile return an error.</div>",
  "record/ Osm Layer/title" : " Osm Layer",
  "record/ Osm Layer/desc" : "<div class=\"block\">The Plugin for creating WMTS layers.</div>",
  "record/ Osm Layer/summaryDesc" : "The Plugin for creating WMTS layers",
  "record/ Osm Layer/input/name/desc" : "<div class=\"block\">The name of the layer.</div>",
  "record/ Osm Layer/input/dpi/desc" : "<div class=\"block\">The DPI of the OSM tiles.</div>",
  "record/ Osm Layer/input/maxExtent/desc" : "<div class=\"block\">The maximum extent of the osm layer. Must have 4 coordinates, minX, minY, maxX, maxY  <p>Default: [-20037508.34, -20037508.34, 20037508.34, 20037508.34]</p></div>",
  "record/ Osm Layer/input/baseURL/desc" : "<div class=\"block\">The URL used for the tile requests.  <p>Supported formats:</p><ul><li>The base part of the URL, for example 'http://tile.openstreetmap.org'. This results in an URL   like 'http://tile.openstreetmap.org/12/123/456.png'.</li><li>An URL template with the placeholders '{x}', '{y}' or '{-y}', and '{z}'. For example:   'http://tile.openstreetmap.org/{z}/{x}/{y}.png'. <br clear=\"none\"></br>   The placeholder '{-y}' provides support for OSGeo TMS tiles.   </li></ul></div>",
  "record/ Osm Layer/input/resolutions/desc" : "<div class=\"block\">The allowed resolutions for this layer.</div>",
  "record/ Osm Layer/input/imageFormat/desc" : "<div class=\"block\"><span class=\"strong\">Deprecated.</span> <i></i></div>",
  "record/ Osm Layer/input/imageExtension/desc" : "<div class=\"block\">The image extension.  for example png, jpg, etc...</div>",
  "record/ Osm Layer/input/tileSize/desc" : "<div class=\"block\">The size of each tile.  Must have 2 values: width, height  <p>Default: [256, 256]</p></div>",
  "record/ Osm Layer/input/opacity/desc" : "<div class=\"block\">The opacity of the image.</div>",
  "record/ Osm Layer/input/rasterStyle/desc" : "<div class=\"block\">The name of the style (in Configuration or Template) to use when drawing the layer to the map.  This is separate from  the style in that it indicates how to draw the map.  It allows one to apply any of the SLD raster styling.</div>",
  "record/ Osm Layer/input/resolutionTolerance/desc" : "<div class=\"block\">The amount of difference between a resolution and a target resolution to consider the two equal.  The value is a  value from 0-1.</div>",
  "record/ Osm Layer/input/failOnError/desc" : "<div class=\"block\">Fail if a tile return an error.</div>",
  "record/application/pdf/desc" : "<div class=\"block\">An PDF output format that uses Jasper reports to generate the result.</div>",
  "record/application/pdf/summaryDesc" : "An PDF output format that uses Jasper reports to generate the result",
  "record/image/tif/desc" : "<div class=\"block\">An PDF output format that uses Jasper reports to generate the result.</div>",
  "record/image/tif/summaryDesc" : "An PDF output format that uses Jasper reports to generate the result",
  "record/image/bmp/desc" : "<div class=\"block\">An PDF output format that uses Jasper reports to generate the result.</div>",
  "record/image/bmp/summaryDesc" : "An PDF output format that uses Jasper reports to generate the result",
  "record/image/gif/desc" : "<div class=\"block\">An PDF output format that uses Jasper reports to generate the result.</div>",
  "record/image/gif/summaryDesc" : "An PDF output format that uses Jasper reports to generate the result",
  "record/image/tiff/desc" : "<div class=\"block\">An PDF output format that uses Jasper reports to generate the result.</div>",
  "record/image/tiff/summaryDesc" : "An PDF output format that uses Jasper reports to generate the result",
  "record/image/png/desc" : "<div class=\"block\">An PDF output format that uses Jasper reports to generate the result.</div>",
  "record/image/png/summaryDesc" : "An PDF output format that uses Jasper reports to generate the result",
  "record/servlet/desc" : "<div class=\"block\">A plugin that loads the config resources from urls starting with prefix:  ://.</div>",
  "record/servlet/summaryDesc" : "A plugin that loads the config resources from urls starting with prefix:  ://",
  "record/classpath/desc" : "<div class=\"block\">A plugin that loads the config resources from urls starting with prefix:  ://.</div>",
  "record/classpath/summaryDesc" : "A plugin that loads the config resources from urls starting with prefix:  ://",
  "record/file/desc" : "<div class=\"block\">A plugin that loads the config resources from urls starting with prefix:  ://.</div>",
  "record/file/summaryDesc" : "A plugin that loads the config resources from urls starting with prefix:  ://",
  "record/!acceptAll/desc" : "<div class=\"block\">A matcher that always returns true.</div>",
  "record/!acceptAll/summaryDesc" : "A matcher that always returns true",
  "record/roleAccessAssertion/desc" : "<div class=\"block\">An access assertion that verifies that the current user has the required roles.</div>",
  "record/roleAccessAssertion/summaryDesc" : "An access assertion that verifies that the current user has the required roles",
  "record/roleAccessAssertion/detail/Required Roles/desc" : "<div class=\"block\">Set the roles required to allow access.  If not roles then the user must be logged in but does not have to have any particular  role.  <p>  This method may only be called once, any subsequent calls will result in errors.  </p></div>",
  "record/!urlImage/desc" : "<div class=\"block\">Interprets the text as an image URL.</div>",
  "record/!urlImage/summaryDesc" : "Interprets the text as an image URL",
  "record/!urlImage/detail/Url Extractor/desc" : "<div class=\"block\">Sets the RegExp pattern to use for extracting the url from the text.  By default the whole string is used.   For example: <code>.*&img src=\"([^\"]+)\".*</code></div>",
  "record/!urlImage/detail/Url Group/desc" : "<div class=\"block\">Select the group in the regular expression that contains the url.</div>",
  "record/!template/desc" : "<div class=\"block\">Represents a report template configuration.</div>",
  "record/!template/summaryDesc" : "Represents a report template configuration",
  "record/!template/detail/Access/desc" : "<div class=\"block\">The roles required to access this template.  If empty or not set then it is a <em>public</em> template.  If there are  many roles then a user must have one of the roles in order to access the template.  <p></p>  The security (how authentication/authorization is done) is configured in the /WEB-INF/classes/mapfish-spring-security.xml  <p>  Any user without the required role will get an error when trying to access the template and the template will not  be visible in the capabilities requests.  </p></div>",
  "record/!template/detail/Attributes/desc" : "<div class=\"block\">Set the attributes for this template.</div>",
  "record/!template/detail/Configuration/desc" : "<div class=\"block\"><strong>Description copied from interface: <code><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/config/HasConfiguration.html#setConfiguration(org.mapfish.print.config.Configuration)\">HasConfiguration</a></code></strong></div>",
  "record/!template/detail/Jdbc Password/desc" : "<div></div>",
  "record/!template/detail/Jdbc Url/desc" : "<div></div>",
  "record/!template/detail/Jdbc User/desc" : "<div></div>",
  "record/!template/detail/Output Filename/desc" : "<div class=\"block\">The default output file name of the report (takes precedence over  <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/config/Configuration.html#setOutputFilename(java.lang.String)\"><code>Configuration.setOutputFilename(String)</code></a>).  This can be overridden by the outputFilename  parameter in the request JSON.  <p>      This can be a string and can also have a date section in the string that will be filled when the report is created for      example a section with ${<dateFormatString>} will be replaced with the current date formatted in the way defined      by the <dateFormatString> string.  The format rules are the rules in      <a shape=\"rect\" href=\"http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\">java.text.SimpleDateFormat</a>      (do a google search if the link above is broken).  </p><p>      Example: <code>outputFilename: print-${dd-MM-yyyy}</code> should output: <code>print-22-11-2014.pdf</code></p><p>      Note: the suffix will be appended to the end of the name.  </p></div>",
  "record/!template/detail/Pdf Config/desc" : "<div class=\"block\">Configure various properties related to the reports generated as PDFs.</div>",
  "record/!template/detail/Processors/desc" : "<div class=\"block\">Set the normal processors.</div>",
  "record/!template/detail/Report Template/desc" : "<div></div>",
  "record/!template/detail/Styles/desc" : "<div class=\"block\">Set the named styles defined in the configuration for this.</div>",
  "record/!template/detail/Table Data/desc" : "<div class=\"block\">Set the key of the data that is the datasource for the main table in the report.</div>",
  "record/!mergeSource/desc" : "<div class=\"block\">Describes the objects to used as sources for the merged DataSource.</div>",
  "record/!mergeSource/summaryDesc" : "Describes the objects to used as sources for the merged DataSource",
  "record/!mergeSource/detail/Fields/desc" : "<div class=\"block\">The names of each field in the DataSource.  See <a title=\"enum in org.mapfish.print.processor.jasper\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/processor/jasper/MergeDataSourceProcessor.SourceType.html\"><code>MergeDataSourceProcessor.SourceType</code></a>  for instructions on how to declare the fields</div>",
  "record/!mergeSource/detail/Key/desc" : "<div class=\"block\">The key to use when looking for the object among the attributes and the processor output values.</div>",
  "record/!mergeSource/detail/Type/desc" : "<div class=\"block\">The type of source.  See <a title=\"enum in org.mapfish.print.processor.jasper\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/processor/jasper/MergeDataSourceProcessor.SourceType.html\"><code>MergeDataSourceProcessor.SourceType</code></a> for the options.</div>",
  "record/alwaysAllowedAssertion/desc" : "<div class=\"block\">This assertion always allows access.</div>",
  "record/alwaysAllowedAssertion/summaryDesc" : "This assertion always allows access",
  "record/!zoomLevels/desc" : "<div class=\"block\">Encapsulates a sorted set of scale denominators representing the allowed scales.  The scales are sorted from largest  to smallest and the index starts at 0, where 0 is the largest scale (most zoomed out)</div>",
  "record/!zoomLevels/summaryDesc" : "Encapsulates a sorted set of scale denominators representing the allowed scales",
  "record/!zoomLevels/detail/Scales/desc" : "<div class=\"block\">Set the scales (sorts from largest to smallest).</div>",
  "record/!certificateStore/desc" : "<div class=\"block\">A configuration object for configuring a custom certificate/trust store.  <p></p>  It is a uri to a java jks keystore file along with the password for unlocking the store.</div>",
  "record/!certificateStore/summaryDesc" : "A configuration object for configuring a custom certificate/trust store",
  "record/!certificateStore/detail/Configuration/desc" : "<div class=\"block\"><strong>Description copied from interface: <code><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/config/HasConfiguration.html#setConfiguration(org.mapfish.print.config.Configuration)\">HasConfiguration</a></code></strong></div>",
  "record/!certificateStore/detail/Password/desc" : "<div class=\"block\">The password for unlocking the certificate store.</div>",
  "record/!certificateStore/detail/Uri/desc" : "<div class=\"block\">The uri to the certificate store. It is a uri to a java jks keystore file along with the  password for unlocking the store.</div>",
  "record/!oldApi/desc" : "<div class=\"block\">Configuration options for how requests to the old api are handled.</div>",
  "record/!oldApi/summaryDesc" : "Configuration options for how requests to the old api are handled",
  "record/!oldApi/detail/Layers First Is Base Layer/desc" : "<div class=\"block\">If true then the first layer in the layers array in the JSON request is the bottom layer of the map.</div>",
  "record/!oldApi/detail/Wms Reverse Layers/desc" : "<div class=\"block\">Set if the layer order coming from the old API client will be reversed for the layers within a WMS request.</div>",
  "record/!credential/desc" : "<div class=\"block\">Represents a set of credentials to use for an http request.  These can be configured in the Configuration yaml file.  <p></p><p><em>Note: proxies are also HttpCredentials and when searching for credentials, the proxies will also be searched  for credentials.</em></p></div>",
  "record/!credential/summaryDesc" : "Represents a set of credentials to use for an http request",
  "record/!credential/detail/Matchers/desc" : "<div class=\"block\">Matchers are used to choose which requests the credentials apply to.</div>",
  "record/!credential/detail/Password/desc" : "<div class=\"block\">The password for authenticating with the credentials.  <p>  This is optional  </p></div>",
  "record/!credential/detail/Username/desc" : "<div class=\"block\">The username for authenticating with the credentials.  <p>  This is optional  </p></div>",
  "record/!dnsMatch/desc" : "<div class=\"block\">Allows to check that a given URL matches a DNS address (textual format).  <p>Example 1: Accept any www.camptocamp.com url</p><pre><code><br>     - !dnsMatch<br>       host : www.camptocamp.com<br> </code></pre><p>Example 2: Accept any www.camptocamp.com url (port == -1 accepts any port)</p><pre><code><br>     - !dnsMatch<br>       host : www.camptocamp.com<br>       port : -1<br> </code></pre><p>Example 3: Accept any www.camptocamp.com url on port 80 only</p><pre><code><br>     - !dnsMatch<br>       host : www.camptocamp.com<br>       port : 80<br> </code></pre><p>      Example 4: Accept www.camptocamp.com urls with paths that start with /print/.      </p><p>          If the regular expression give does not start with / then it will be added because all paths start with /      </p><pre><code><br>     - !dnsMatch<br>       host : www.camptocamp.com<br>       pathRegex : /print/.+<br> </code></pre></div>",
  "record/!dnsMatch/summaryDesc" : "Allows to check that a given URL matches a DNS address (textual format)",
  "record/!dnsMatch/detail/Host/desc" : "<div class=\"block\">Set the host.</div>",
  "record/!dnsMatch/detail/Path Regex/desc" : "<div class=\"block\">The regular expression used to verify the path of the uri as is expected.  A / will be added to the beginning of path if  it is missing because all paths start with /.  <p>  The regular expression used are the ones supported by java:  <a shape=\"rect\" href=\"http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html\">  http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html  </a></p></div>",
  "record/!dnsMatch/detail/Port/desc" : "<div></div>",
  "record/andAssertion/desc" : "<div class=\"block\">An access assertion that throws fails if any of the encapsulated assertions fail.</div>",
  "record/andAssertion/summaryDesc" : "An access assertion that throws fails if any of the encapsulated assertions fail",
  "record/andAssertion/detail/Predicates/desc" : "<div class=\"block\">Set all the Predicates/AccessAssertion that have to all pass in order for this assertion to pass.  <p>      An exception is thrown if this method is called more than once.  </p></div>",
  "record/!updatePdfConfigUpdate/desc" : "<div class=\"block\">The object that defines how to update the <a title=\"class in org.mapfish.print.config\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/config/PDFConfig.html\"><code>PDFConfig</code></a>.</div>",
  "record/!updatePdfConfigUpdate/summaryDesc" : "The object that defines how to update the PDFConfig",
  "record/!updatePdfConfigUpdate/detail/Format/desc" : "<div class=\"block\">The replacement format.  It is a printf style format.  The documentation is in the Formatter class  (just google/bing java.util.Formatter).  <p></p>  Example: \"Report for %s\"</div>",
  "record/!updatePdfConfigUpdate/detail/Value Key/desc" : "<div class=\"block\">The key to use to look up the value in the values object.  It can be a path that can reach into nested objects.  <p></p>  Examples 1 a simple lookup key: \"key\"  Example 2 a path.  First part (before .) is the lookup key, the second part is the field name to load: \"key.fieldName\"</div>",
  "record/!pdfConfig/desc" : "<div class=\"block\">A Configuration object for containing metadata that will be embedded in the PDF and parameters to use when encoding the  PDF.  <p></p>  Naturally this only applies to reports that are exported as PDFs.</div>",
  "record/!pdfConfig/summaryDesc" : "A Configuration object for containing metadata that will be embedded in the PDF and parameters to use when encoding the  PDF",
  "record/!pdfConfig/detail/Author/desc" : "<div class=\"block\">Set the author of the PDF.</div>",
  "record/!pdfConfig/detail/Compressed/desc" : "<div class=\"block\">If this property is set to true then the resulting PDF will be a compressed PDF. By default the PDF is not compressed.</div>",
  "record/!pdfConfig/detail/Creator/desc" : "<div class=\"block\">Set the creator of the PDF.</div>",
  "record/!pdfConfig/detail/Keywords/desc" : "<div class=\"block\">The keywords to include in the PDF metadata.</div>",
  "record/!pdfConfig/detail/Subject/desc" : "<div class=\"block\">Set the subject of the PDF.</div>",
  "record/!pdfConfig/detail/Title/desc" : "<div class=\"block\">Set the title of the PDF.</div>",
  "record/!localMatch/desc" : "<div class=\"block\">Allows to check that a given URL is served by one of the local network  interface or one of its aliases.  <p>Example 1: Accept any localhost url</p><pre><code><br>     - localMatch {}<br> </code></pre><p>Example 2: Accept any localhost url (port == -1 accepts any port)</p><pre><code><br>     - localMatch<br>       port : -1<br> </code></pre><p>Example 3: Accept any localhost url on port 80 only</p><pre><code><br>     - localMatch<br>       port : 80<br> </code></pre><p>      Example 4: Accept localhost urls with paths that start with /print/.      </p><p>          If the regular expression give does not start with / then it will be added because all paths start with /      </p><pre><code><br>     - localMatch<br>       pathRegex : /print/.+<br> </code></pre></div>",
  "record/!localMatch/summaryDesc" : "Allows to check that a given URL is served by one of the local network  interface or one of its aliases",
  "record/!localMatch/detail/Path Regex/desc" : "<div class=\"block\">The regular expression used to verify the path of the uri as is expected.  A / will be added to the beginning of path if  it is missing because all paths start with /.  <p>  The regular expression used are the ones supported by java:  <a shape=\"rect\" href=\"http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html\">  http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html  </a></p></div>",
  "record/!localMatch/detail/Port/desc" : "<div></div>",
  "record/!proxy/desc" : "<div class=\"block\">This configuration object configures the proxies to be used by the system.  This is configured as  one of the root elements of the config.yaml   <p>Example - Explicitly declare that requests to localhost or www.camptocamp.org require proxying: </p><pre><code><br> proxies:<br>   - !proxy<br>     requireProxy:<br>       - !localMatch {}<br>       - !ipMatch<br>         ip: www.camptocamp.org<br>     host: proxy.host.com<br>     port: 8888<br>     username: username<br>     password: xyzpassword<br> </code></pre><p>Example - Proxy all requests except localhost and www.camptocamp.org: </p><pre><code><br> proxies:<br>   - !proxy<br>     noProxy:<br>       - !localMatch {}<br>       - !ipMatch<br>         ip: www.camptocamp.org<br>     scheme: http<br>     host: proxy.host.com<br>     port: 8888<br>     username: username<br>     password: xyzpassword<br> </code></pre></div>",
  "record/!proxy/summaryDesc" : "This configuration object configures the proxies to be used by the system",
  "record/!proxy/detail/Host/desc" : "<div class=\"block\">The host of the proxy.  Can be a hostname or ip address.  <p>  This is required.  </p></div>",
  "record/!proxy/detail/Matchers/desc" : "<div class=\"block\">Matchers are used to choose which requests this proxy applies to.</div>",
  "record/!proxy/detail/Password/desc" : "<div class=\"block\">The password for authenticating with the proxy.  <p>  This is optional  </p></div>",
  "record/!proxy/detail/Port/desc" : "<div class=\"block\">The host of the proxy.  Can be a hostname or ip address.  <p>  This is optional.  The default value is 80.  </p></div>",
  "record/!proxy/detail/Scheme/desc" : "<div class=\"block\">The scheme (http, https) of the proxy.  <p>  This is optional, default is http if no username and https if there is a password  </p></div>",
  "record/!proxy/detail/Username/desc" : "<div class=\"block\">The username for authenticating with the proxy.  <p>  This is optional  </p></div>",
  "record/!ipMatch/desc" : "<div class=\"block\">Compares ip address string and mask string by using <code>InetAddress</code> comparison.  <p>Example 1: accept any uri whose host matches the ip of www.camptocamp.com</p><pre><code><br>     - !ipMatch<br>       ip : www.camptocamp.com<br> </code></pre><p>Example 2: accept any uri whose host ip starts with 192.1</p><pre><code><br>     - !ipMatch<br>       ip : 192.1.0.0<br>       mask : 255.255.0.0<br> </code></pre><p>Example 3: accept any uri whose host ip starts with 192.1 and restricts to port 80</p><pre><code><br>     - !ipMatch<br>       ip : 192.1.0.0<br>       mask : 255.255.0.0<br>       port : 80<br> </code></pre><p>Example 4: accept any uri whose host ip starts with 192.1 and and allows any port (-1 is any port)</p><pre><code><br>     - !ipMatch<br>       ip : 192.1.0.0<br>       mask : 255.255.0.0<br>       port : -1<br> </code></pre><p>Example 5: accept any uri whose host ip starts with 192.1 and restricts to paths that start with /print/</p><pre><code><br>     - !ipMatch<br>       ip : 192.1.0.0<br>       mask : 255.255.0.0<br>       pathRegex : /print/.+<br> </code></pre></div>",
  "record/!ipMatch/summaryDesc" : "Compares ip address string and mask string by using InetAddress comparison",
  "record/!ipMatch/detail/Ip/desc" : "<div class=\"block\">Set the allowed ip address for this matcher.</div>",
  "record/!ipMatch/detail/Mask/desc" : "<div class=\"block\">Set the Mask to apply to the ip address obtained from the URI that is being tested.</div>",
  "record/!ipMatch/detail/Path Regex/desc" : "<div class=\"block\">The regular expression used to verify the path of the uri as is expected.  A / will be added to the beginning of path if  it is missing because all paths start with /.  <p>  The regular expression used are the ones supported by java:  <a shape=\"rect\" href=\"http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html\">  http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html  </a></p></div>",
  "record/!ipMatch/detail/Port/desc" : "<div></div>",
  "record/mapfishJsonParser/desc" : "<div class=\"block\">Supports a JSON based style format.  <p>      This style parser support two versions of JSON formatting.  Both versions use the same parameter names for configuring      the values of the various properties of the style but the layout differs between the two and version 2 is more flexible      and powerful than version 1.  </p><h2>Mapfish JSON Style Version 1</h2><p>      Version 1 is compatible with mapfish print <_ is=\"is\" v2=\"v2\" as=\"as\" the=\"the\" {urn:x-prefix:follows}_=\"follows:_\" and=\"and\" p=\"p\" layout=\"layout\" openlayers=\"openlayers\" on=\"on\" _=\"_\" styling.=\"styling.\" based=\"based\"><pre><code><br> {<br>   \"version\" : \"1\",<br>   \"styleProperty\":\"_gx_style\",<br>   \"1\": {<br>     \"fillColor\":\"#FF0000\",<br>     \"fillOpacity\":0,<br>     \"rotation\" : \"30\",<br> </code></pre><p><code></code>      \"externalGraphic\" : \"mark.png\"      \"graphicName\": \"circle\",      \"graphicOpacity\": 0.4,      \"pointRadius\": 5,  </p><p></p>      \"strokeColor\":\"#FFA829\",      \"strokeOpacity\":1,      \"strokeWidth\":5,      \"strokeLinecap\":\"round\",      \"strokeDashstyle\":\"dot\",  <p></p>      \"fontColor\":\"#000000\",      \"fontFamily\": \"sans-serif\",      \"fontSize\": \"12px\",      \"fontStyle\": \"normal\",      \"fontWeight\": \"bold\",      \"haloColor\": \"#123456\",      \"haloOpacity\": \"0.7\",      \"haloRadius\": \"3.0\",      \"label\": \"${name}\",      \"labelAlign\": \"cm\",      \"labelRotation\": \"45\",      \"labelXOffset\": \"-25.0\",      \"labelYOffset\": \"-35.0\"     }  }    <p></p><h2>Mapfish JSON Style Version 2</h2><p>      Version 2 uses the same property names as version 1 but has a different structure.  The layout is as follows:  </p><pre><code><br> {<br>   \"version\" : \"2\",<br>   // shared values can be declared here (at top level)<br>   // and used in form ${constName} later in json<br>   \"val1\" : \"#FFA829\",<br>   // default values for properties can be defined here<br>   \" strokeDashstyle\" : \"dot\"<br>   \"[population > 300]\" : {<br>     // default values for current rule can be defined here<br>     // they will override default values defined at<br>     // higher level<br>     \"rotation\" : \"30\",<br> </code></pre><p><code></code>      //min and max scale denominator are optional      \"maxScale\" : 1000000,      \"minScale\" : 100000,      \"symbolizers\" : [{        // values defined in symbolizer will override defaults        \"type\" : \"point\",        \"fillColor\":\"#FF0000\",        \"fillOpacity\":0,        \"rotation\" : \"30\",        \"externalGraphic\" : \"mark.png\",  </p><p></p>        \"graphicName\": \"circle\",        \"graphicOpacity\": 0.4,        \"pointRadius\": 5,  <p></p>        \"strokeColor\":\"${val1}\",        \"strokeOpacity\":1,        \"strokeWidth\":5,        \"strokeLinecap\":\"round\",        \"strokeDashstyle\":\"dot\"      },{        \"type\" : \"line\",        \"strokeColor\":\"${val1}\",        \"strokeOpacity\":1,        \"strokeWidth\":5,        \"strokeLinecap\":\"round\",        \"strokeDashstyle\":\"dot\"      },{        \"type\" : \"polygon\",        \"fillColor\":\"#FF0000\",        \"fillOpacity\":0,  <p></p>        \"strokeColor\":\"${val1}\",        \"strokeOpacity\":1,        \"strokeWidth\":5,        \"strokeLinecap\":\"round\",        \"strokeDashstyle\":\"dot\"      },{        \"type\" : \"text\",        \"fontColor\":\"#000000\",        \"fontFamily\": \"sans-serif\",        \"fontSize\": \"12px\",        \"fontStyle\": \"normal\",        \"fontWeight\": \"bold\",        \"haloColor\": \"#123456\",        \"haloOpacity\": \"0.7\",        \"haloRadius\": \"3.0\",        \"label\": \"[name]\",        \"fillColor\":\"#FF0000\",        \"fillOpacity\":0,        \"labelAlign\": \"cm\",        \"labelRotation\": \"45\",        \"labelXOffset\": \"-25.0\",        \"labelYOffset\": \"-35.0\"      }    ]}  }    <p>      As illustrated above the style consists of:      </p><ul><li>The version number (2) (required)</li><li>              Common values which can be referenced in symbolizer property values.(optional)              <p>Values can be referenced in the value of a property with the pattern: ${valName}</p><p>Value names can only contain numbers, characters, _ or -</p><p>                  Values do not have to be the full property they will be interpolated.  For example:                  <code>The value is ${val}</code></p></li><li>              Defaults property definitions(optional):              <p>                  In order to reduce duplication and keep the style definitions small, default values can be specified.  The                  default values in the root (style level) will be used in all symbolizers if the value is not defined.  The                  style level default will apply to all symbolizers defined in the system.              </p><p>                  The only difference between a value and a default is that the default has a well known name, therefore defaults                  can also be used as values.              </p></li><li>              All the styling rules (At least one is required)              <p>                  A styling rule has a key which is the filter which selects the features that the rule will be used to draw and the                  rule definition object.              </p><p>The filter is either <code>*</code> or an                  <a shape=\"rect\" href=\"http://docs.geoserver.org/stable/en/user/filter/ecql_reference.html#filter-ecql-reference\">                  ECQL Expression</a>) surrounded by square brackets.  For example: [att < 23].</p><p><em>WARNING:</em> At the moment DWITHIN and BEYOND spatial functions take a unit parameter.  However it                      is ignored by geotools and the distance is always in the crs of the geometry projection.                  </p>                  The rule definition is as follows:                  <ul><li>                          Default property values (optional):                          <p>                              Each rule can also have defaults.  If the style and the rule have a default for the same property                              the rule will override the style default.  All defaults can be (of course) overridden by a value                              in a symbolizer.                          </p></li><li>                          minScale (optional)                          <p>                              The minimum scale that the rule should evaluate to true                          </p></li><li>                          maxScale (optional)                          <p>                              The maximum scale that the rule should evaluate to true                          </p></li><li>                          An array of symbolizers. (at least one required).                          <p>                              A symbolizer must have a type property (point, line, polygon, text) which indicates the type of                              symbolizer and it has the attributes for that type of symbolizer.  All values have defaults                              so it is possible to define a symbolizer as with only the type property. The only exception is                              that the \"text\" symbolizer needs a label property.                          </p></li></ul></li></ul></_></p></div>",
  "record/mapfishJsonParser/summaryDesc" : "Supports a JSON based style format",
  "record/sldParser/desc" : "<div class=\"block\">Basic implementation for loading and parsing an SLD style.</div>",
  "record/sldParser/summaryDesc" : "Basic implementation for loading and parsing an SLD style",
  "record/!scalebar/desc" : "<div class=\"block\">The attributes for <a title=\"class in org.mapfish.print.processor.map.scalebar\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/processor/map/scalebar/CreateScalebarProcessor.html\"><code>CreateScalebarProcessor</code></a>.</div>",
  "record/!scalebar/summaryDesc" : "The attributes for CreateScalebarProcessor",
  "record/!scalebar/detail/Config Name/desc" : "<div class=\"block\"><strong>Description copied from interface: <code><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/Attribute.html#setConfigName(java.lang.String)\">Attribute</a></code></strong></div>",
  "record/!scalebar/detail/Default/desc" : "<div></div>",
  "record/!scalebar/detail/Height/desc" : "<div></div>",
  "record/!scalebar/detail/Width/desc" : "<div></div>",
  "record/!scalebar/input/subIntervals/desc" : "<div class=\"block\">Should sub-intervals be shown? Default: false  <p>The main intervals are divided into additional sub-intervals to provide  visual guidance. The number of sub-intervals depends on the length of an interval.</p></div>",
  "record/!scalebar/input/color/desc" : "<div class=\"block\">The color used to draw the bar and lines (default: black).</div>",
  "record/!scalebar/input/unit/desc" : "<div class=\"block\">The unit to use.   <p>The unit can be any of:</p><ul><li>m (mm, cm, m or km)</li><li>ft (in, ft, yd, mi)</li><li>degrees (min, sec, °)</li></ul><p>If the value is too big or too small, the module will switch to one of the unit in parenthesis  (the same unit is used for every interval). If this behaviour is not desired, the `lockUnits` parameter  will force the declared unit (or map unit if no unit is declared) to be used for the scalebar.</p></div>",
  "record/!scalebar/input/geodetic/desc" : "<div class=\"block\">Use geodetic measurement calculations for the scalebar.</div>",
  "record/!scalebar/input/verticalAlign/desc" : "<div class=\"block\">The vertical alignment of the scalebar inside the scalebar graphic (default: bottom).</div>",
  "record/!scalebar/input/type/desc" : "<div class=\"block\">The scalebar type.   <p>Available types:</p><ul><li>\"line\": A simple line with graduations.</li><li>\"bar\" (default): A thick bar with alternating black and white zones marking the intervals.           The colors can be customized by changing the properties `color` and `barBgColor`.       </li><li>\"bar_sub\": Like \"bar\", but with little ticks for the labels.</li></ul></div>",
  "record/!scalebar/input/padding/desc" : "<div class=\"block\">The padding around the scalebar (in pixel).</div>",
  "record/!scalebar/input/fontSize/desc" : "<div class=\"block\">The font size (in pt) of the labels (default: 12).</div>",
  "record/!scalebar/input/barSize/desc" : "<div class=\"block\">The thickness of the bar or the height of the tick marks on the line (in pixel).</div>",
  "record/!scalebar/input/lockUnits/desc" : "<div class=\"block\">Force that the given unit is used (default: false).  For example if the unit is set to meters and `lockUnits` is enabled,  then meters is always used, even when kilometers would create nicer  values.</div>",
  "record/!scalebar/input/renderAsSvg/desc" : "<div class=\"block\">Indicates if the scalebar graphic is rendered as SVG  (will default to <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/config/Configuration.html#defaultStyle\"><code>Configuration.defaultStyle</code></a>).</div>",
  "record/!scalebar/input/lineWidth/desc" : "<div class=\"block\">The thickness of the lines or the bar border (in pixel).</div>",
  "record/!scalebar/input/intervals/desc" : "<div class=\"block\">The number of intervals (default: 3).  There must be at least two intervals.</div>",
  "record/!scalebar/input/backgroundColor/desc" : "<div class=\"block\">The background color for the scalebar graphic (default: rgba(255, 255, 255, 0)).</div>",
  "record/!scalebar/input/labelDistance/desc" : "<div class=\"block\">The distance between scalebar and labels (in pixel).</div>",
  "record/!scalebar/input/font/desc" : "<div class=\"block\">The font used for the labels (default: Helvetica).</div>",
  "record/!scalebar/input/align/desc" : "<div class=\"block\">The horizontal alignment of the scalebar inside the scalebar graphic (default: left).</div>",
  "record/!scalebar/input/barBgColor/desc" : "<div class=\"block\">The color used to draw the alternating blocks for style \"bar\" and \"bar_sub\" (default: white).</div>",
  "record/!scalebar/input/orientation/desc" : "<div class=\"block\">The scalebar orientation.   <p>Available options:</p><ul><li>\"horizontalLabelsBelow\" (default): Horizontal scalebar and the labels are shown below the bar.</li><li>\"horizontalLabelsAbove\": Horizontal scalebar and the labels are shown above the bar.</li><li>\"verticalLabelsLeft\": Vertical scalebar and the labels are shown left of the bar.</li><li>\"verticalLabelsRight\": Vertical scalebar and the labels are shown right of the bar.</li></ul></div>",
  "record/!scalebar/input/fontColor/desc" : "<div class=\"block\">The font color of the labels (default: black).</div>",
  "record/!map/desc" : "<div class=\"block\">The attributes for <a title=\"class in org.mapfish.print.processor.map\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/processor/map/CreateMapProcessor.html\"><code>CreateMapProcessor</code></a>.</div>",
  "record/!map/summaryDesc" : "The attributes for CreateMapProcessor",
  "record/!map/detail/Config Name/desc" : "<div class=\"block\"><strong>Description copied from interface: <code><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/Attribute.html#setConfigName(java.lang.String)\">Attribute</a></code></strong></div>",
  "record/!map/detail/Default/desc" : "<div></div>",
  "record/!map/detail/Dpi Suggestions/desc" : "<div></div>",
  "record/!map/detail/Height/desc" : "<div></div>",
  "record/!map/detail/Max Dpi/desc" : "<div></div>",
  "record/!map/detail/Width/desc" : "<div></div>",
  "record/!map/detail/Zoom Level Snap Strategy/desc" : "<div></div>",
  "record/!map/detail/Zoom Levels/desc" : "<div></div>",
  "record/!map/detail/Zoom Snap Geodetic/desc" : "<div></div>",
  "record/!map/detail/Zoom Snap Tolerance/desc" : "<div></div>",
  "record/!map/input/center/desc" : "<div class=\"block\">An array of 2 doubles, (x, y).  The center of the map.</div>",
  "record/!map/input/bbox/desc" : "<div class=\"block\">An array of 4 doubles, minX, minY, maxX, maxY.  The bounding box of the map.  <p></p>  Either the bbox or the center + scale must be defined  <p></p></div>",
  "record/!map/input/rotation/desc" : "<div class=\"block\">The rotation of the map.</div>",
  "record/!map/input/useNearestScale/desc" : "<div class=\"block\">Indicates if the map should adjust its scale/zoom level to be equal to one of those defined in the configuration file.  <p></p></div>",
  "record/!map/input/dpi/desc" : "<div class=\"block\">The output dpi of the printed map.</div>",
  "record/!map/input/areaOfInterest/desc" : "<div class=\"block\">A GeoJSON geometry that is essentially the area of the area to draw on the map.  <p></p></div>",
  "record/!map/input/longitudeFirst/desc" : "<div class=\"block\">By default the normal axis order as specified in EPSG code will be used when parsing projections.  However  the requestor can override this by explicitly declaring that longitude axis is first.</div>",
  "record/!map/input/useAdjustBounds/desc" : "<div class=\"block\">Indicates if the map should adjust its bounds.  <p></p></div>",
  "record/!map/input/scale/desc" : "<div class=\"block\">If center is defined then this is the scale of the map centered at center.</div>",
  "record/!map/input/layers/desc" : "<div class=\"block\">The json with all the layer information.  This will be parsed in postConstruct into a list of layers and  therefore this field should not normally be accessed.   The first layer in the array will be the top layer in the map.  The last layer in the array will be the bottom  layer in the map.  There for the last layer will be hidden by the first layer (where not transparent).</div>",
  "record/!map/input/projection/desc" : "<div class=\"block\">The projection of the map.</div>",
  "record/!map/input/dpiSensitiveStyle/desc" : "<div class=\"block\">Should the vector style definitions be adapted to the target DPI resolution? (Default: true)  <p></p>  The style definitions are often optimized for a use with OpenLayers (which uses  a DPI value of 72). When these styles are used to print with a higher DPI value,  lines often look too thin, label are too small, etc.  <p></p>  If this property is set to `true`, the style definitions will be scaled to the target DPI value.</div>",
  "record/!map/input/zoomToFeatures/desc" : "<div class=\"block\">Zoom the map to the features of a specific layer or all features of the map.</div>",
  "record/!table/desc" : "<div class=\"block\">The attributes for <a title=\"class in org.mapfish.print.processor.jasper\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/processor/jasper/TableProcessor.html\"><code>TableProcessor</code></a>.</div>",
  "record/!table/summaryDesc" : "The attributes for TableProcessor",
  "record/!table/detail/Config Name/desc" : "<div class=\"block\"><strong>Description copied from interface: <code><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/Attribute.html#setConfigName(java.lang.String)\">Attribute</a></code></strong></div>",
  "record/!table/detail/Default/desc" : "<div></div>",
  "record/!table/input/data/desc" : "<div class=\"block\">An array for each table row.</div>",
  "record/!table/input/columns/desc" : "<div class=\"block\">The column configuration names for the table.</div>",
  "record/!datasource/desc" : "<div class=\"block\">This attribute represents a collection of attributes which can be used as the data source of a Jasper report's  table/detail section.  <p>      For example consider the case where the report should contain multiple tables or charts but the number of reports      may change depending on the request.  In this case the client will post a datasource attribute json object containing an array      of all the table attribute objects.  The <a title=\"class in org.mapfish.print.processor.jasper\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/processor/jasper/DataSourceProcessor.html\"><code>DataSourceProcessor</code></a> will process      the datasource attribute and create a Jasper datasource that contains all the tables.  </p><p>      This datasource must be used in tandem with the <a title=\"class in org.mapfish.print.processor.jasper\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/processor/jasper/DataSourceProcessor.html\"><code>DataSourceProcessor</code></a> processor.  </p><p>      The json data of this attribute is special since it represents an array of attributes, each element in the array must      contain all of the attributes required to satisfy the processors in the      <a title=\"class in org.mapfish.print.processor.jasper\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/processor/jasper/DataSourceProcessor.html\"><code>DataSourceProcessor</code></a>.  </p><p>  Example configuration:  </p><pre><code><br> datasource: !datasource<br>   table: !table<br>   map: !map<br>     width: 200<br>     height: 100<br> </code></pre><p>  Example request data:  </p><pre><code><br> datasource: [<br>   {<br>       table: {<br>           ... // normal table attribute data<br>       },<br>       map: {<br>           ... // normal map attribute data<br>       }<br>   }, {<br>       table: {<br>           ... // normal table attribute data<br>       },<br>       map: {<br>           ... // normal map attribute data<br>       }<br>   }<br> ]<br> </code></pre></div>",
  "record/!datasource/summaryDesc" : "This attribute represents a collection of attributes which can be used as the data source of a Jasper report's  table/detail section",
  "record/!datasource/detail/Attributes/desc" : "<div class=\"block\">The attributes that are acceptable by this dataSource.  The format is the same as the template attributes section.</div>",
  "record/!datasource/detail/Config Name/desc" : "<div class=\"block\"><strong>Description copied from interface: <code><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/Attribute.html#setConfigName(java.lang.String)\">Attribute</a></code></strong></div>",
  "record/!datasource/detail/Default/desc" : "<div></div>",
  "record/!features/desc" : "<div class=\"block\">Attribute for GeoJson features collection.  <p></p>  Created by Stéphane Brunner on 16/4/14.</div>",
  "record/!features/summaryDesc" : "Attribute for GeoJson features collection",
  "record/!features/detail/Config Name/desc" : "<div class=\"block\"><strong>Description copied from interface: <code><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/Attribute.html#setConfigName(java.lang.String)\">Attribute</a></code></strong></div>",
  "record/!features/detail/Default/desc" : "<div></div>",
  "record/!features/input/features/desc" : "<div class=\"block\">The geojson features.</div>",
  "record/!features/input/longitudeFirst/desc" : "<div class=\"block\">By default the normal axis order as specified in EPSG code will be used when parsing projections.  However  the requestor can override this by explicitly declaring that longitude axis is first.</div>",
  "record/!float/desc" : "<div class=\"block\">A float type attribute.</div>",
  "record/!float/summaryDesc" : "A float type attribute",
  "record/!float/detail/Config Name/desc" : "<div class=\"block\"><strong>Description copied from interface: <code><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/Attribute.html#setConfigName(java.lang.String)\">Attribute</a></code></strong></div>",
  "record/!float/detail/Default/desc" : "<div></div>",
  "record/!string/desc" : "<div class=\"block\">Attribute that reads a string from the request data.</div>",
  "record/!string/summaryDesc" : "Attribute that reads a string from the request data",
  "record/!string/detail/Config Name/desc" : "<div class=\"block\"><strong>Description copied from interface: <code><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/Attribute.html#setConfigName(java.lang.String)\">Attribute</a></code></strong></div>",
  "record/!string/detail/Default/desc" : "<div></div>",
  "record/!string/detail/Max Length/desc" : "<div class=\"block\">The maximum number of characters allowed for this field (default: unlimited).</div>",
  "record/!boolean/desc" : "<div class=\"block\">A boolean type attribute.</div>",
  "record/!boolean/summaryDesc" : "A boolean type attribute",
  "record/!boolean/detail/Config Name/desc" : "<div class=\"block\"><strong>Description copied from interface: <code><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/Attribute.html#setConfigName(java.lang.String)\">Attribute</a></code></strong></div>",
  "record/!boolean/detail/Default/desc" : "<div></div>",
  "record/!legend/desc" : "<div class=\"block\">Objects needed by the <a title=\"class in org.mapfish.print.processor.jasper\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/processor/jasper/LegendProcessor.html\"><code>LegendProcessor</code></a>.</div>",
  "record/!legend/summaryDesc" : "Objects needed by the LegendProcessor",
  "record/!legend/detail/Config Name/desc" : "<div class=\"block\"><strong>Description copied from interface: <code><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/Attribute.html#setConfigName(java.lang.String)\">Attribute</a></code></strong></div>",
  "record/!legend/detail/Default/desc" : "<div></div>",
  "record/!legend/input/classes/desc" : "<div class=\"block\">Other embedded classes.</div>",
  "record/!legend/input/name/desc" : "<div class=\"block\">Name of the legend class.</div>",
  "record/!legend/input/icons/desc" : "<div class=\"block\">Urls for downloading icons for each legend row.</div>",
  "record/!integer/desc" : "<div class=\"block\">An integer type attribute.</div>",
  "record/!integer/summaryDesc" : "An integer type attribute",
  "record/!integer/detail/Config Name/desc" : "<div class=\"block\"><strong>Description copied from interface: <code><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/Attribute.html#setConfigName(java.lang.String)\">Attribute</a></code></strong></div>",
  "record/!integer/detail/Default/desc" : "<div></div>",
  "record/!overviewMap/desc" : "<div class=\"block\">The attributes for an overview map.</div>",
  "record/!overviewMap/summaryDesc" : "The attributes for an overview map",
  "record/!overviewMap/detail/Config Name/desc" : "<div class=\"block\"><strong>Description copied from interface: <code><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/Attribute.html#setConfigName(java.lang.String)\">Attribute</a></code></strong></div>",
  "record/!overviewMap/detail/Default/desc" : "<div></div>",
  "record/!overviewMap/detail/Dpi Suggestions/desc" : "<div></div>",
  "record/!overviewMap/detail/Height/desc" : "<div></div>",
  "record/!overviewMap/detail/Max Dpi/desc" : "<div></div>",
  "record/!overviewMap/detail/Style/desc" : "<div class=\"block\">The style name of a style to apply to the bbox rectangle of the original map during rendering.  The style name must map to a style in the template or the configuration objects.</div>",
  "record/!overviewMap/detail/Width/desc" : "<div></div>",
  "record/!overviewMap/detail/Zoom Factor/desc" : "<div class=\"block\">The zoom factor by which the extent of the main map will be augmented to  create an overview.</div>",
  "record/!overviewMap/detail/Zoom Level Snap Strategy/desc" : "<div></div>",
  "record/!overviewMap/detail/Zoom Levels/desc" : "<div></div>",
  "record/!overviewMap/detail/Zoom Snap Geodetic/desc" : "<div></div>",
  "record/!overviewMap/detail/Zoom Snap Tolerance/desc" : "<div></div>",
  "record/!overviewMap/input/rotation/desc" : "<div class=\"block\">The rotation of the map.</div>",
  "record/!overviewMap/input/projection/desc" : "<div class=\"block\">The projection of the map.</div>",
  "record/!overviewMap/input/dpiSensitiveStyle/desc" : "<div class=\"block\">Should the vector style definitions be adapted to the target DPI resolution? (Default: true)  <p></p>  The style definitions are often optimized for a use with OpenLayers (which uses  a DPI value of 72). When these styles are used to print with a higher DPI value,  lines often look too thin, label are too small, etc.  <p></p>  If this property is set to `true`, the style definitions will be scaled to the target DPI value.</div>",
  "record/!overviewMap/input/dpi/desc" : "<div class=\"block\">The output dpi of the printed map.</div>",
  "record/!overviewMap/input/useNearestScale/desc" : "<div class=\"block\">Indicates if the map should adjust its scale/zoom level to be equal to one of those defined in the configuration file.  <p></p></div>",
  "record/!overviewMap/input/layers/desc" : "<div class=\"block\">The json with all the layer information.  This will be parsed in postConstruct into a list of layers and  therefore this field should not normally be accessed.</div>",
  "record/!overviewMap/input/bbox/desc" : "<div class=\"block\">An array of 4 doubles, minX, minY, maxX, maxY.  The bounding box of the overview-map.  <p></p>  If a bounding box is given, the overview-map shows a fixed extent. The configuration  parameter <code>zoomFactor</code> is ignored in this case.</div>",
  "record/!overviewMap/input/longitudeFirst/desc" : "<div class=\"block\">By default the normal axis order as specified in EPSG code will be used when parsing projections.  However  the requestor can override this by explicitly declaring that longitude axis is first.</div>",
  "record/!overviewMap/input/scale/desc" : "<div class=\"block\">If <code>center</code> is defined then this is the scale of the map centered at <code>center</code>.</div>",
  "record/!overviewMap/input/useAdjustBounds/desc" : "<div class=\"block\">Indicates if the map should adjust its bounds.  <p></p></div>",
  "record/!overviewMap/input/center/desc" : "<div class=\"block\">An array of 2 doubles, (x, y).  The center of the overview-map.  <p></p>  If center and scale are given, the overview-map shows a fixed extent. The configuration  parameter <code>zoomFactor</code> is ignored in this case.</div>",
  "record/!stringArray/desc" : "<div class=\"block\">An attribute that can contain an array of strings.</div>",
  "record/!stringArray/summaryDesc" : "An attribute that can contain an array of strings",
  "record/!stringArray/detail/Config Name/desc" : "<div class=\"block\"><strong>Description copied from interface: <code><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/Attribute.html#setConfigName(java.lang.String)\">Attribute</a></code></strong></div>",
  "record/!stringArray/detail/Default/desc" : "<div></div>",
  "record/!northArrow/desc" : "<div class=\"block\">The attributes for <a title=\"class in org.mapfish.print.processor.map\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/processor/map/CreateNorthArrowProcessor.html\"><code>CreateNorthArrowProcessor</code></a>.</div>",
  "record/!northArrow/summaryDesc" : "The attributes for CreateNorthArrowProcessor",
  "record/!northArrow/detail/Config Name/desc" : "<div class=\"block\"><strong>Description copied from interface: <code><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/Attribute.html#setConfigName(java.lang.String)\">Attribute</a></code></strong></div>",
  "record/!northArrow/detail/Default/desc" : "<div></div>",
  "record/!northArrow/detail/Size/desc" : "<div class=\"block\">The size (width and height) of the north-arrow graphic in the  JasperReport template.  <p>The graphic is a square so that the arrow can be rotated properly.</p></div>",
  "record/!northArrow/input/graphic/desc" : "<div class=\"block\">The path to a graphic to use for the north-arrow.  <p>It can either be an URL (\"http://xyx.com/img/north-arrow.png\") or  a file in the configuration folder (\"file://NorthArrow.svg\").  Both SVG graphics and raster graphics (png, jpeg, tiff, ...) are  supported.</p><p>While the resulting graphic used in the JasperReport template is  a square, this graphic can have an arbitrary aspect ratio. The graphic  will be scaled to the output size and rotated around its center.</p><p>If no graphic is given, a default north-arrow is used.</p></div>",
  "record/!northArrow/input/backgroundColor/desc" : "<div class=\"block\">The background color for the north-arrow graphic (default: rgba(255, 255, 255, 0)).</div>",
  "record/!paging/desc" : "<div class=\"block\">Attribute that defines how a map is displayed across many pages.   <p>      This is used by the <a shape=\"rect\" href=\"#/processors#!paging\">Paging Processor</a>.  </p></div>",
  "record/!paging/summaryDesc" : "Attribute that defines how a map is displayed across many pages",
  "record/!paging/detail/Config Name/desc" : "<div class=\"block\"><strong>Description copied from interface: <code><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/Attribute.html#setConfigName(java.lang.String)\">Attribute</a></code></strong></div>",
  "record/!paging/detail/Default/desc" : "<div></div>",
  "record/!paging/input/aoiStyle/desc" : "<div class=\"block\">If this is defined it will override the style used for rendering the Area Of Interest in the  main <a shape=\"rect\" href=\"#/attributes#!map\">map attribute's</a> Area of Interest definition.</div>",
  "record/!paging/input/aoiDisplay/desc" : "<div class=\"block\">Indicates how to render the area of interest on this sub-map. This  makes it easier to how the all the sub-maps fit together to for the complete map.  Also if the map is rendered as a whole  in one part of the report one can easily see where in the complete map the sub-map fits, even without looking at the  labelling.  <p>      For options see: <a title=\"enum in org.mapfish.print.attribute.map\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/map/AreaOfInterest.AoiDisplay.html\"><code>AreaOfInterest.AoiDisplay</code></a></p><p>      By default the rendering in the <a shape=\"rect\" href=\"#/attributes#!map\">map attribute's</a> area of interest will be used  </p></div>",
  "record/!paging/input/overlap/desc" : "<div class=\"block\">The amount that each page/sub-map should overlap each other.  <p>      For example if the value is 1 and the projection of the map is degrees then the overlap will be 1 degree.  </p><p>      The default is to not have any overlap.  </p></div>",
  "record/!paging/input/scale/desc" : "<div class=\"block\">The scale denominator for each page/sub-map.</div>",
  "record/!style/desc" : "<div class=\"block\">Attribute for GeoJson Styles collection.  <p></p>  Created by Stéphane Brunner on 24/4/14.</div>",
  "record/!style/summaryDesc" : "Attribute for GeoJson Styles collection",
  "record/!style/detail/Config Name/desc" : "<div class=\"block\"><strong>Description copied from interface: <code><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/Attribute.html#setConfigName(java.lang.String)\">Attribute</a></code></strong></div>",
  "record/!style/detail/Default/desc" : "<div></div>",
  "record/!style/input/style/desc" : "<div class=\"block\">The SDL string.</div>",
  "record/!updatePdfConfig/desc" : "<div class=\"block\">This processor allows the dynamic configuration of the <a title=\"class in org.mapfish.print.config\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/config/PDFConfig.html\"><code>PDFConfig</code></a> object by obtaining data  from attributes.  For example the title and author could be string attributes posted from the client, this processor would update  the <a title=\"class in org.mapfish.print.config\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/config/PDFConfig.html\"><code>PDFConfig</code></a> object with the attribute data allowing per report PDF metadata.  <p></p>  Note: The <a title=\"class in org.mapfish.print.config\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/config/PDFConfig.html\"><code>PDFConfig</code></a> can also be configured in the config.yaml either at the config or template level.</div>",
  "record/!updatePdfConfig/summaryDesc" : "This processor allows the dynamic configuration of the PDFConfig object by obtaining data  from attributes",
  "record/!updatePdfConfig/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!updatePdfConfig/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!updatePdfConfig/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!updatePdfConfig/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!updatePdfConfig/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!updatePdfConfig/detail/Updates/desc" : "<div class=\"block\">The pdf metadata property -> attribute name map.  The keys must be one of the values in  <a title=\"class in org.mapfish.print.config\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/config/PDFConfig.html\"><code>PDFConfig</code></a> and the values must be the name of the attribute to obtain the  the data from.  Example Configuration:  <p></p><pre><code><br> processors:<br>   - !updatePdfConfig<br>     updates:<br>       title: \"titleAttribute\"<br>       subject: \"subjectAttribute\"<br> </code></pre><p></p>  The type of the attribute must be of the correct type, for example title mus be a string, keywords must be an array of strings,  compress must be a boolean.  <p></p>  If the value is within the attribute output object then you can use dot separators for each level. For example suppose  there is a custom attribute: myconfig, if and it has a property title then the configuration would be:  <pre><code><br> processors:<br>   - updatePdfConfig<br>     updates: {title: :myconfig.title\"}<br> </code></pre><p></p>  For more power a \"format\" can be defined.  The format is a printf style format string which will be called with a single  value that is identified by the value key/path.  In this case the short hand key: value can't be used instead it is as follows:  <pre><code><br>   - updatePdfConfig<br>     updates:<br>       title: !updatePdfConfigUpdate<br>          valueKey: \"myconfig.title\"<br>          format: \"Print Report %s\"<br> </code></pre></div>",
  "record/!updatePdfConfig/input/pdfConfig/desc" : "<div class=\"block\">The pdf configuration object.</div>",
  "record/!updatePdfConfig/input/values/desc" : "<div class=\"block\">The values object used to retrieve the required attributes.</div>",
  "record/!reportBuilder/desc" : "<div class=\"block\">A processor that actually compiles a jasper report.</div>",
  "record/!reportBuilder/summaryDesc" : "A processor that actually compiles a jasper report",
  "record/!reportBuilder/detail/Configuration/desc" : "<div class=\"block\"><strong>Description copied from interface: <code><a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/config/HasConfiguration.html#setConfiguration(org.mapfish.print.config.Configuration)\">HasConfiguration</a></code></strong></div>",
  "record/!reportBuilder/detail/Directory/desc" : "<div class=\"block\">Set the directory and test that the directory exists and is contained within the Configuration directory.</div>",
  "record/!reportBuilder/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!reportBuilder/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!reportBuilder/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!reportBuilder/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!reportBuilder/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!forwardHeaders/desc" : "<div class=\"block\">This processor forwards all the headers from the print request (from the mapfish-print client) to each http request made for  the particular print job.  All headers can be forwarded (if forwardAll is set to true) or the specific headers to forward  can be specified.  <p>Example 1: Forward all headers from print request</p><pre><code><br> - !forwardHeaders<br>   all: true<br> </code></pre><p>Example 1: Forward specific headers (header1 and header2 will be forwarded)</p><pre><code><br> - !forwardHeaders<br>   headers: [header1, header2]<br> </code></pre></div>",
  "record/!forwardHeaders/summaryDesc" : "This processor forwards all the headers from the print request (from the mapfish-print client) to each http request made for  the particular print job",
  "record/!forwardHeaders/detail/All/desc" : "<div class=\"block\">If set to true then all headers are forwarded.  If this is true headers should be empty (or undefined)</div>",
  "record/!forwardHeaders/detail/Headers/desc" : "<div class=\"block\">Set the header names to forward from the request.  Should not be defined if all is set to true</div>",
  "record/!forwardHeaders/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!forwardHeaders/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!forwardHeaders/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!forwardHeaders/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!forwardHeaders/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!forwardHeaders/input/clientHttpRequestFactory/desc" : "<div class=\"block\">The object for creating requests.  There should always be an instance in the values object  so it does not need to be created.</div>",
  "record/!forwardHeaders/input/requestHeaders/desc" : "<div class=\"block\">The http headers from the print request.</div>",
  "record/!forwardHeaders/output/clientHttpRequestFactory/desc" : "<div class=\"block\">The object for creating requests.  There should always be an instance in the values object  so it does not need to be created.</div>",
  "record/!restrictUris/desc" : "<div class=\"block\">This processor check urls against a set of url matchers to see if the request should be allowed or rejected.  <p>      Usage of processor is as follows:  </p><pre><code><br> - !restrictUris<br>   matchers:<br>     - !localMatch {}<br>     - !ipMatch<br>       ip: www.camptocamp.org<br>     - !dnsMatch<br>       host: mapfish-geoportal.demo-camptocamp.com<br>       port: 80<br>     - !dnsMatch<br>       host: labs.metacarta.com<br>       port: 80<br>     - !dnsMatch<br>       host: terraservice.net<br>       port: 80<br>     - !dnsMatch<br>       host: tile.openstreetmap.org<br>       port: 80<br>     - !dnsMatch<br>       host: www.geocat.ch<br>       port: 80<br> </code></pre><p><strong>Note:</strong> if this class is part of a CompositeClientHttpRequestFactoryProcessor (!configureHttpRequests) then      it should be the last one so that the checks are done after all changes to the URIs  </p></div>",
  "record/!restrictUris/summaryDesc" : "This processor check urls against a set of url matchers to see if the request should be allowed or rejected",
  "record/!restrictUris/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!restrictUris/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!restrictUris/detail/Matchers/desc" : "<div class=\"block\">The matchers used to select the legal urls. For example:  <pre><code><br> - !restrictUris<br>   matchers:<br>     - !localMatch<br>       dummy: true<br>     - !ipMatch<br>     ip: www.camptocamp.org<br>     - !dnsMatch<br>       host: mapfish-geoportal.demo-camptocamp.com<br>       port: 80<br>     - !dnsMatch<br>       host: labs.metacarta.com<br>       port: 80<br>     - !dnsMatch<br>       host: terraservice.net<br>       port: 80<br>     - !dnsMatch<br>       host: tile.openstreetmap.org<br>       port: 80<br>     - !dnsMatch<br>       host: www.geocat.ch<br>       port: 80<br> </code></pre></div>",
  "record/!restrictUris/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!restrictUris/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!restrictUris/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!restrictUris/input/clientHttpRequestFactory/desc" : "<div class=\"block\">The object for creating requests.  There should always be an instance in the values object  so it does not need to be created.</div>",
  "record/!restrictUris/output/clientHttpRequestFactory/desc" : "<div class=\"block\">The object for creating requests.  There should always be an instance in the values object  so it does not need to be created.</div>",
  "record/!setFeatures/desc" : "<div class=\"block\">Processor to set features to the vector layers.  <p></p>  Created by Stéphane Brunner on 16/4/14.</div>",
  "record/!setFeatures/summaryDesc" : "Processor to set features to the vector layers",
  "record/!setFeatures/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!setFeatures/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!setFeatures/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!setFeatures/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!setFeatures/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!setFeatures/input/features/desc" : "<div class=\"block\">The features.</div>",
  "record/!setFeatures/input/map/desc" : "<div class=\"block\">The map to update.</div>",
  "record/!setFeatures/input/clientHttpRequestFactory/desc" : "<div class=\"block\">The factory to use for making http requests.</div>",
  "record/!createMapPages/desc" : "<div class=\"block\">Processor used to display a map on multiple pages.  <p>      This processor will take the defined <a shape=\"rect\" href=\"#/attributes#!map\">map attribute</a> and using the geometry defined in the      <a shape=\"rect\" href=\"#/attributes#!map\">map attribute's</a> area of interest, will create an Iterable<Values> each of which contains:      </p><ul><li>a new definition of a <a shape=\"rect\" href=\"#/attributes#!map\">map attribute</a></li><li>name value which is a string that roughly describes which part of the main map this sub-map is</li><li>left value which is the name of the sub-map to the left of the current map</li><li>right value which is the name of the sub-map to the right of the current map</li><li>top value which is the name of the sub-map to the top of the current map</li><li>bottom value which is the name of the sub-map to the bottom of the current map</li></ul>       The iterable of values can be consumed by a <a shape=\"rect\" href=\"#/processors#!dataSource\">DataSource Processor</a> and as a result be put in the      report (or one of the sub-reports) table.  One must be careful as this can result in truly giant reports.    Example Configuration:  <pre><code></code></pre>   Example Request:  <pre><code></code></pre></div>",
  "record/!createMapPages/summaryDesc" : "Processor used to display a map on multiple pages",
  "record/!createMapPages/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!createMapPages/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!createMapPages/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!createMapPages/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!createMapPages/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!createMapPages/input/map/desc" : "<div class=\"block\">The required parameters for the map.</div>",
  "record/!createMapPages/input/paging/desc" : "<div class=\"block\">Attributes that define how each page/sub-map will be generated.  It defines the scale and how to render the area of interest,  etc...</div>",
  "record/!createMapPages/output/datasource/desc" : "<div class=\"block\">Resulting list of values for the maps.</div>",
  "record/!prepareTable/desc" : "<div class=\"block\">A processor for generating a table.</div>",
  "record/!prepareTable/summaryDesc" : "A processor for generating a table",
  "record/!prepareTable/detail/Columns/desc" : "<div class=\"block\">Set strategies for converting the textual representation of each column to some other object (image, other text, etc...).  <p></p>  Note: The type returned by the column converter must match the type in the jasper template.</div>",
  "record/!prepareTable/detail/Converters/desc" : "<div class=\"block\">Set strategies for converting the textual representation of each cell to some other object (image, other text, etc...).  <p></p>  This is similar to the converters specified for a particular column. The difference is that these converters are applied  to every cell of the table (except for the cells of those columns that are assigned a specific converter).</div>",
  "record/!prepareTable/detail/Detail Style/desc" : "<div class=\"block\">The id of the style to apply to the all columns in the table detail section except first and last columns.  This value is will be  used as a default if either firstDetailStyle or lastDetailStyle is not defined.  This is required if dynamic is true  and is not permitted if dynamic is false.  <p>      The style must be a style element in the jasperTemplate.  </p></div>",
  "record/!prepareTable/detail/Dynamic/desc" : "<div class=\"block\">If true then the Jasper Report Template will be generated dynamically based on the columns in the table attribute.  <p>By default this is false because width is required if it is true</p></div>",
  "record/!prepareTable/detail/Exclude Columns/desc" : "<div class=\"block\">A set of column names to exclude from the table.</div>",
  "record/!prepareTable/detail/First Detail Style/desc" : "<div class=\"block\">The id of the style to apply to the first column in the table detail section.  This is optional.  <p>      The style must be a style element in the jasperTemplate.  </p></div>",
  "record/!prepareTable/detail/First Header Style/desc" : "<div class=\"block\">The id of the style to apply to the first column in the table header.  This is optional.  <p>      The style must be a style element in the jasperTemplate.  </p></div>",
  "record/!prepareTable/detail/Header Style/desc" : "<div class=\"block\">The id of the style to apply to the all columns in the table header except first and last columns.  This value is will be  used as a default if either firstHeaderStyle or lastHeaderStyle is not defined.  This is required if dynamic is true  and is not permitted if dynamic is false.  <p>      The style must be a style element in the jasperTemplate.  </p></div>",
  "record/!prepareTable/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!prepareTable/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!prepareTable/detail/Jasper Template/desc" : "<div class=\"block\">The path to the jasper template that contains the template for the sub-report.  If dynamic is false then the template  will be used without any changes.  It will simply be compiled and used as is.  <p>  If dynamic is true then the template will be used to obtain the column styles and the size of the subreport.  The  actual field and column definitions will be dynamically generated from the table data that is provided.  </p>  This may be null if dynamic is false.  If it is null then the main template will likely use the generated  table datasource directly as its datasource for use in its detail section and the table will be directly in the main template's  detail section.  Or a later processor may use the table's datasource in someway.</div>",
  "record/!prepareTable/detail/Last Detail Style/desc" : "<div class=\"block\">The id of the style to apply to the last column in the table detail section.  This is optional.  <p>      The style must be a style element in the jasperTemplate.  </p></div>",
  "record/!prepareTable/detail/Last Header Style/desc" : "<div class=\"block\">The id of the style to apply to the last column in the table header.  This is optional.  <p>      The style must be a style element in the jasperTemplate.  </p></div>",
  "record/!prepareTable/detail/Max Columns/desc" : "<div class=\"block\">The maximum number of columns to allow.</div>",
  "record/!prepareTable/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!prepareTable/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!prepareTable/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!prepareTable/input/table/desc" : "<div class=\"block\">Data for constructing the table Datasource.</div>",
  "record/!prepareTable/input/tempTaskDirectory/desc" : "<div class=\"block\">The directory to write the generated table to (if dynamic).</div>",
  "record/!prepareTable/input/template/desc" : "<div class=\"block\">The template containing this table processor.</div>",
  "record/!prepareTable/input/clientHttpRequestFactory/desc" : "<div class=\"block\">A factory for making http requests.  This is added to the values by the framework and therefore  does not need to be set in configuration</div>",
  "record/!prepareTable/output/table/desc" : "<div class=\"block\">The table datasource.</div>",
  "record/!prepareTable/output/numberOfTableRows/desc" : "<div class=\"block\">The number of rows in the table.</div>",
  "record/!prepareTable/output/tableSubReport/desc" : "<div class=\"block\">The path to the generated sub-report.  If dynamic is false then this will be null.</div>",
  "record/!createDataSource/desc" : "<div class=\"block\">A processor that will process a <a title=\"class in org.mapfish.print.attribute\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/DataSourceAttribute.DataSourceAttributeValue.html\"><code>DataSourceAttribute.DataSourceAttributeValue</code></a> and construct  a single Jasper DataSource from the input values in the <a title=\"class in org.mapfish.print.attribute\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/DataSourceAttribute.DataSourceAttributeValue.html\"><code>DataSourceAttribute.DataSourceAttributeValue</code></a>  input object.   The <a title=\"class in org.mapfish.print.attribute\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/DataSourceAttribute.DataSourceAttributeValue.html\"><code>DataSourceAttribute.DataSourceAttributeValue</code></a> has an array of maps, each map in the array  equates to a row in the Jasper DataSource.   The DataSourceProcessor can be configured with processors which will be used  to transform each map in the input array before constructing the final DataSource row.   For example, each map in the array could be <a title=\"class in org.mapfish.print.attribute.map\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/attribute/map/MapAttribute.MapAttributeValues.html\"><code>MapAttribute.MapAttributeValues</code></a> and the  DataSourceProcessor could be configured with !createMap processor.  In this scenario each element in the array would be transformed  by the !createMap processor and thus each row of the resulting DataSource will contain the map subreport created by the !createMap  processor.   An additional point to remember is that (as with the normal execution) in addition to the output of the processors, the attributes  in the input map will also be columns in the row.  This means that the jasper report that makes use of the resulting DataSource  will have access to both the results of the processor as well as the input values (unless overwritten by the processor output).   If the reportKey is defined (and reportTemplate) then a the reportTemplate jrxml file will be compiled (as required by all  jrxml files) and an additional column will be added to each row [reportKey] : [compiled reportTemplate File]   If reportKey is defined the reportTemplate must also be defined (and vice-versa).</div>",
  "record/!createDataSource/summaryDesc" : "A processor that will process a DataSourceAttribute",
  "record/!createDataSource/detail/Attributes/desc" : "<div class=\"block\">All the attributes needed either by the processors for each datasource row or by the jasper template.</div>",
  "record/!createDataSource/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!createDataSource/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!createDataSource/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!createDataSource/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!createDataSource/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!createDataSource/detail/Processors/desc" : "<div class=\"block\">All the processors that will executed for each value retrieved from the <a title=\"class in org.mapfish.print.output\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/output/Values.html\"><code>Values</code></a> object  with the datasource name.  All output values from the processor graph will be the datasource values.  <p></p><p>  Each value retrieved from values with the datasource name will be the input of the processor graph  and all the output values for that execution will be the values of a single row in the datasource.  The Jasper template can use any of the values in its detail band.  </p></div>",
  "record/!createDataSource/detail/Report Key/desc" : "<div class=\"block\">The key/name to use when putting the path to the compiled subreport in each row of the datasource.  This is required if <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/processor/jasper/DataSourceProcessor.html#reportTemplate\"><code>reportTemplate</code></a> has been set.  The path to the compiled  subreport will be added to each row in the datasource with this value as the key.  This allows the containing report to  reference the subreport in each row.</div>",
  "record/!createDataSource/detail/Report Template/desc" : "<div class=\"block\">The path to the report template used to render each row of the data.  This is only required if a subreport needs to be  compiled and is referenced in the containing report's detail section.  <p>      The path should be relative to the configuration directory  </p></div>",
  "record/!createDataSource/input/datasource/desc" : "<div class=\"block\">The data that will be processed by this processor in order to create a Jasper DataSource object.</div>",
  "record/!createDataSource/input/template/desc" : "<div class=\"block\">The values object with all values.  This is required in order to run sub-processor graph</div>",
  "record/!createDataSource/input/values/desc" : "<div class=\"block\">The values object with all values.  This is required in order to run sub-processor graph</div>",
  "record/!createDataSource/output/jrDataSource/desc" : "<div class=\"block\">The datasource to be assigned to a report or sub-report detail/table section.</div>",
  "record/!createNorthArrow/desc" : "<div class=\"block\">Processor to create a north-arrow for a map.   <p>The north-arrow is rotated according to the rotation  of the associated map.</p><p>Example configuration:</p><pre><code><br> attributes:<br>   ...<br>   northArrowDef: !northArrow<br>     size: 50<br>     default:<br>       graphic: \"file://NorthArrow_10.svg\"<br><br> processors:<br> ...<br>   - !createNorthArrow<br>     inputMapper: {<br>       mapDef: map,<br>       northArrowDef: northArrow<br>     }<br>     outputMapper: {<br>       northArrowSubReport: northArrowSubReport<br>     }<br> </code></pre></div>",
  "record/!createNorthArrow/summaryDesc" : "Processor to create a north-arrow for a map",
  "record/!createNorthArrow/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!createNorthArrow/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!createNorthArrow/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!createNorthArrow/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!createNorthArrow/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!createNorthArrow/input/tempTaskDirectory/desc" : "<div class=\"block\">The path to the temporary directory for the print task.</div>",
  "record/!createNorthArrow/input/clientHttpRequestFactory/desc" : "<div class=\"block\">The factory to use for making http requests.</div>",
  "record/!createNorthArrow/input/northArrow/desc" : "<div class=\"block\">The parameters for the north arrow.</div>",
  "record/!createNorthArrow/input/map/desc" : "<div class=\"block\">The map the north arrow is created for.</div>",
  "record/!createNorthArrow/output/northArrowSubReport/desc" : "<div class=\"block\">The path to the compiled sub-report for the north arrow.</div>",
  "record/!createNorthArrow/output/graphic/desc" : "<div class=\"block\">The path to the north arrow graphic (for testing purposes).</div>",
  "record/!createScalebar/desc" : "<div class=\"block\">Processor to create a scalebar for a map.</div>",
  "record/!createScalebar/summaryDesc" : "Processor to create a scalebar for a map",
  "record/!createScalebar/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!createScalebar/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!createScalebar/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!createScalebar/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!createScalebar/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!createScalebar/input/scalebar/desc" : "<div class=\"block\">The parameters for the scalebar.</div>",
  "record/!createScalebar/input/mapContext/desc" : "<div class=\"block\">The map the scalebar is created for.</div>",
  "record/!createScalebar/input/template/desc" : "<div class=\"block\">The containing template.</div>",
  "record/!createScalebar/input/tempTaskDirectory/desc" : "<div class=\"block\">The path to the temporary directory for the print task.</div>",
  "record/!createScalebar/output/graphic/desc" : "<div class=\"block\">The path to the scalebar graphic (for testing purposes).</div>",
  "record/!createScalebar/output/scalebarSubReport/desc" : "<div class=\"block\">The path to the compiled sub-report for the scalebar.</div>",
  "record/!mergeDataSources/desc" : "<div class=\"block\">This processor combines DataSources and individual processor outputs (or attribute values) into a single DataSource which  can be used in a jasper report's detail section.  <p>  An example use case is where we might have zero or many of tables and zero or many legends.  You can configure the  template with a detail section that contains a subreport, the name of which is a field in the DataSources and the DataSources  for the sub-template another field.  Then you can merge the legend and the tables into a single DataSources.  This way the  report will nicely expand depending on if you have a legend and how many tables you have in your report.  </p></div>",
  "record/!mergeDataSources/summaryDesc" : "This processor combines DataSources and individual processor outputs (or attribute values) into a single DataSource which  can be used in a jasper report's detail section",
  "record/!mergeDataSources/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!mergeDataSources/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!mergeDataSources/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!mergeDataSources/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!mergeDataSources/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!mergeDataSources/detail/Sources/desc" : "<div class=\"block\">The <em>source</em> to add to the merged DataSource.  Each <em>source</em> indicates if it should be treated  as a datasource or as a single item to add to the merged DataSource.  If the source indicates that it is a  <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/processor/jasper/MergeDataSourceProcessor.SourceType.html#DATASOURCE\"><code>MergeDataSourceProcessor.SourceType.DATASOURCE</code></a> the object  each row in the datasource will be used to form a row in the merged DataSource.  If the source type is  <a shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/processor/jasper/MergeDataSourceProcessor.SourceType.html#SINGLE\"><code>MergeDataSourceProcessor.SourceType.SINGLE</code></a> the object will be a single row  even if it is in fact a DataSource.</div>",
  "record/!mergeDataSources/input/values/desc" : "<div class=\"block\">The values used to look up the values to merge together.</div>",
  "record/!mergeDataSources/output/mergedDataSource/desc" : "<div class=\"block\">The resulting datasource.</div>",
  "record/!setWmsCustomParam/desc" : "<div class=\"block\">Processor to set a param to the WMS layers.  <p></p>  Created by Stéphane Brunner on 16/4/14.</div>",
  "record/!setWmsCustomParam/summaryDesc" : "Processor to set a param to the WMS layers",
  "record/!setWmsCustomParam/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!setWmsCustomParam/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!setWmsCustomParam/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!setWmsCustomParam/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!setWmsCustomParam/detail/Param Name/desc" : "<div class=\"block\">Set the parameter name.</div>",
  "record/!setWmsCustomParam/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!setWmsCustomParam/input/value/desc" : "<div class=\"block\">The value.</div>",
  "record/!setWmsCustomParam/input/map/desc" : "<div class=\"block\">The map to update.</div>",
  "record/!prepareLegend/desc" : "<div class=\"block\">Create a legend.</div>",
  "record/!prepareLegend/summaryDesc" : "Create a legend",
  "record/!prepareLegend/detail/Dpi/desc" : "<div class=\"block\">The DPI value that is used for the legend graphics.  Note: This parameter is only considered when `maxWidth` is set.</div>",
  "record/!prepareLegend/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!prepareLegend/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!prepareLegend/detail/Max Width/desc" : "<div class=\"block\">The maximum width in pixels for the legend graphics.  If this parameter is set, the legend graphics are cropped to the given maximum  width. In this case a sub-report is created containing the graphic.  For reference see the example `legend_dynamic`.</div>",
  "record/!prepareLegend/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!prepareLegend/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!prepareLegend/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!prepareLegend/detail/Template/desc" : "<div class=\"block\">The path to the Jasper Report template for rendering the legend data.</div>",
  "record/!prepareLegend/input/tempTaskDirectory/desc" : "<div class=\"block\">The path to the temporary directory for the print task.</div>",
  "record/!prepareLegend/input/legend/desc" : "<div class=\"block\">The data required for creating the legend.</div>",
  "record/!prepareLegend/input/clientHttpRequestFactory/desc" : "<div class=\"block\">A factory for making http requests.  This is added to the values by the framework and therefore  does not need to be set in configuration</div>",
  "record/!prepareLegend/input/template/desc" : "<div class=\"block\">The template that contains this processor.</div>",
  "record/!prepareLegend/output/legendSubReport/desc" : "<div class=\"block\">The path to the compiled subreport.</div>",
  "record/!prepareLegend/output/numberOfLegendRows/desc" : "<div class=\"block\">The number of rows in the legend.</div>",
  "record/!prepareLegend/output/legend/desc" : "<div class=\"block\">The datasource for the legend object in the report.</div>",
  "record/!useHttpForHttps/desc" : "<div class=\"block\">This processor maps https requests to http requests for certain hosts. The port number can also be mapped since that is usually  required.  <p>Example: </p><pre><code><br> - !useHttpForHttps<br>   hosts: [localhost, www.camptocamp.com]<br>   portMapping:<br>     443 : 80<br>     8443 : 8443<br> </code></pre></div>",
  "record/!useHttpForHttps/summaryDesc" : "This processor maps https requests to http requests for certain hosts",
  "record/!useHttpForHttps/detail/Hosts/desc" : "<div class=\"block\">Set the patterns to use for selecting the hosts to apply the https -> http mapping to.  <ul><li>If the host starts and ends with / then it is compiled as a regular expression</li><li>Otherwise the hosts must exactly match</li></ul></div>",
  "record/!useHttpForHttps/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!useHttpForHttps/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!useHttpForHttps/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!useHttpForHttps/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!useHttpForHttps/detail/Port Mapping/desc" : "<div class=\"block\">Set the https port to http port mapping.</div>",
  "record/!useHttpForHttps/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!useHttpForHttps/input/clientHttpRequestFactory/desc" : "<div class=\"block\">The object for creating requests.  There should always be an instance in the values object  so it does not need to be created.</div>",
  "record/!useHttpForHttps/output/clientHttpRequestFactory/desc" : "<div class=\"block\">The object for creating requests.  There should always be an instance in the values object  so it does not need to be created.</div>",
  "record/!addHeaders/desc" : "<div class=\"block\">This processor allows adding static headers to an http request.  <p>Example: add a Cookie header with multiple header values and add header2 with only one value</p><pre><code><br> - !addHeaders<br>   headers:<br>     Cookie : [cookie-value, cookie-value2]<br>     Header2 : header2-value<br> </code></pre></div>",
  "record/!addHeaders/summaryDesc" : "This processor allows adding static headers to an http request",
  "record/!addHeaders/detail/Headers/desc" : "<div class=\"block\">A map of the header key value pairs.  Keys are strings and values are either list of strings or a string.</div>",
  "record/!addHeaders/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!addHeaders/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!addHeaders/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!addHeaders/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!addHeaders/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!addHeaders/input/clientHttpRequestFactory/desc" : "<div class=\"block\">The object for creating requests.  There should always be an instance in the values object  so it does not need to be created.</div>",
  "record/!addHeaders/output/clientHttpRequestFactory/desc" : "<div class=\"block\">The object for creating requests.  There should always be an instance in the values object  so it does not need to be created.</div>",
  "record/!configureHttpRequests/desc" : "<div class=\"block\">A processor that wraps several <a title=\"class in org.mapfish.print.processor.http\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/processor/http/AbstractClientHttpRequestFactoryProcessor.html\"><code>AbstractClientHttpRequestFactoryProcessor</code></a>s.  <p>    This makes it more convenient to configure multiple processors that modify    <a title=\"interface in org.mapfish.print.http\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/http/MfClientHttpRequestFactory.html\"><code>MfClientHttpRequestFactory</code></a> objects. </p><p>      Consider the case where you need to:      </p><ul><li>Restrict allowed URIS using the !restrictUris processor</li><li>Forward all headers from print request to all requests using !forwardHeaders</li><li>Change the url using the !mapUri processor</li></ul>      In this case the !mapUri processor must execute before the !restrictUris processor but it is difficult to enforce this, the      inputMapping and outputMapping must be carefully designed in order to do it.  The following should work but compare it with      the example below:      <pre><code><br> - !mapUri<br>   mapping:<br>     (http)://localhost(.*) : \"$1://127.0.0.1$2\"<br>   outputMapper: {clientHttpRequestFactory: clientHttpRequestFactoryMapped}<br> - !forwardHeaders<br>   all: true<br>   inputMapper: {clientHttpRequestFactoryMapped :clientHttpRequestFactory}<br>   outputMapper: {clientHttpRequestFactory: clientHttpRequestFactoryWithHeaders}<br> - !restrictUris<br>   matchers: [!localMatch {}]<br>   inputMapper: {clientHttpRequestFactoryWithHeaders:clientHttpRequestFactory}<br>     </code></pre><p>      The recommended way to write the above configuration is as follows:  </p><pre><code><br> - !configureHttpRequests<br>   httpProcessors:<br>     - !mapUri<br>       mapping:<br>         (http)://localhost(.*) : \"$1://127.0.0.1$2\"<br>     - !forwardHeaders<br>       all: true<br>     - !restrictUris<br>       matchers: [!localMatch {}]<br> </code></pre></div>",
  "record/!configureHttpRequests/summaryDesc" : "A processor that wraps several AbstractClientHttpRequestFactoryProcessors",
  "record/!configureHttpRequests/detail/Http Processors/desc" : "<div class=\"block\">Sets all the http processors that will executed by this processor.</div>",
  "record/!configureHttpRequests/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!configureHttpRequests/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!configureHttpRequests/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!configureHttpRequests/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!configureHttpRequests/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!configureHttpRequests/input/TEMPLATE_KEY/desc" : "<div class=\"block\">The key that is used to store <a title=\"class in org.mapfish.print.config\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/config/Template.html\"><code>Template</code></a>.</div>",
  "record/!configureHttpRequests/input/CLIENT_HTTP_REQUEST_FACTORY_KEY/desc" : "<div class=\"block\">The key that is used to store <a title=\"interface in org.mapfish.print.http\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/http/MfClientHttpRequestFactory.html\"><code>MfClientHttpRequestFactory</code></a>.</div>",
  "record/!configureHttpRequests/input/TASK_DIRECTORY_KEY/desc" : "<div class=\"block\">The key that is used to store the task directory in the values map.</div>",
  "record/!configureHttpRequests/input/PDF_CONFIG/desc" : "<div class=\"block\">The key for the values object for the <a title=\"class in org.mapfish.print.config\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/config/PDFConfig.html\"><code>PDFConfig</code></a> object.</div>",
  "record/!configureHttpRequests/input/SUBREPORT_DIR/desc" : "<div class=\"block\">The key for the values object for the subreport directory.</div>",
  "record/!configureHttpRequests/output/clientHttpRequestFactory/desc" : "<div class=\"block\">The object for creating requests.  There should always be an instance in the values object  so it does not need to be created.</div>",
  "record/!mapUri/desc" : "<div class=\"block\">This processor maps uris submitted to the <a title=\"interface in org.mapfish.print.http\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/http/MfClientHttpRequestFactory.html\"><code>MfClientHttpRequestFactory</code></a> to a modified uri  as specified by the mapping parameter.  <p>Example: change the hostname of all requests that are http requests and have the hostname: myhost.com to localhost instead  of myhost.com</p><pre><code><br> - !mapUri<br>   mapping: {(http)://myhost.com(.*) : \"$1://localhost$2\"}<br> </code></pre></div>",
  "record/!mapUri/summaryDesc" : "This processor maps uris submitted to the MfClientHttpRequestFactory to a modified uri  as specified by the mapping parameter",
  "record/!mapUri/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!mapUri/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!mapUri/detail/Mapping/desc" : "<div class=\"block\">Set the uri mappings.   The key is a regular expression that must match uri's string form. The value will be used for the replacement.</div>",
  "record/!mapUri/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!mapUri/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!mapUri/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!mapUri/input/clientHttpRequestFactory/desc" : "<div class=\"block\">The object for creating requests.  There should always be an instance in the values object  so it does not need to be created.</div>",
  "record/!mapUri/output/clientHttpRequestFactory/desc" : "<div class=\"block\">The object for creating requests.  There should always be an instance in the values object  so it does not need to be created.</div>",
  "record/!createMap/desc" : "<div></div>",
  "record/!createMap/summaryDesc" : "",
  "record/!createMap/detail/Image Type/desc" : "<div class=\"block\">Set the type of buffered image rendered to.  See <code>CreateMapProcessor.BufferedImageType</code>.  <p></p>  Default is <code>CreateMapProcessor.BufferedImageType.TYPE_4BYTE_ABGR</code>.</div>",
  "record/!createMap/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!createMap/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!createMap/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!createMap/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!createMap/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!createMap/input/map/desc" : "<div class=\"block\">The required parameters for the map.</div>",
  "record/!createMap/input/clientHttpRequestFactory/desc" : "<div class=\"block\">A factory for making http requests.  This is added to the values by the framework and therefore  does not need to be set in configuration</div>",
  "record/!createMap/input/tempTaskDirectory/desc" : "<div class=\"block\">The path to the temporary directory for the print task.</div>",
  "record/!createMap/output/mapSubReport/desc" : "<div class=\"block\">The path to the compiled sub-report for the map.</div>",
  "record/!createMap/output/mapContext/desc" : "<div class=\"block\">The map parameters used after zooming and all other calculations that are made.</div>",
  "record/!createMap/output/layerGraphics/desc" : "<div class=\"block\">The paths to a graphic for each layer.</div>",
  "record/!setStyle/desc" : "<div class=\"block\">Processor to set a style on vector layers from the attributes.  <p></p>  Created by Stéphane Brunner on 24/4/14.</div>",
  "record/!setStyle/summaryDesc" : "Processor to set a style on vector layers from the attributes",
  "record/!setStyle/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!setStyle/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!setStyle/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!setStyle/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!setStyle/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!setStyle/input/map/desc" : "<div class=\"block\">The map to update.</div>",
  "record/!setStyle/input/style/desc" : "<div class=\"block\">The style.</div>",
  "record/!setStyle/input/clientHttpRequestFactory/desc" : "<div class=\"block\">A factory for making http requests.  This is added to the values by the framework and therefore  does not need to be set in configuration</div>",
  "record/!createOverviewMap/desc" : "<div class=\"block\">Processor to create overview maps. Internally <a title=\"class in org.mapfish.print.processor.map\" shape=\"rect\" target=\"javadocsTab\" href=\"javadoc/org/mapfish/print/processor/map/CreateMapProcessor.html\"><code>CreateMapProcessor</code></a> is used.  <p></p>  Example Configuration:  <pre><code><br> attributes:<br>    ...<br>    overviewMapDef: !overviewMap<br>      width: 300<br>      height: 200<br>      maxDpi: 400<br> processors:<br>    ...<br>    - !createOverviewMap<br>      inputMapper: {<br>        mapDef: map,<br>        overviewMapDef: overviewMap<br>      }<br>      outputMapper: {<br>        overviewMapSubReport: overviewMapOut,<br>        layerGraphics: overviewMapLayerGraphics<br>      }<br> </code></pre><p></p><strong>Features:</strong><p></p>  The attribute overviewMap allows to overwrite all properties of the main map, for example to use different layers.  The overview map can have a different rotation than the main map. For example the main map is rotated and the overview map faces  north. But the overview map can also be rotated.  <p></p>  The style of the bbox rectangle can be changed.</div>",
  "record/!createOverviewMap/summaryDesc" : "Processor to create overview maps",
  "record/!createOverviewMap/detail/Input Mapper/desc" : "<div class=\"block\">The input mapper.</div>",
  "record/!createOverviewMap/detail/Input Prefix/desc" : "<div class=\"block\">The prefix to apply to each input value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!createOverviewMap/detail/Output Mapper/desc" : "<div class=\"block\">The output mapper.</div>",
  "record/!createOverviewMap/detail/Output Prefix/desc" : "<div class=\"block\">The prefix to apply to each output value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!createOverviewMap/detail/Prefix/desc" : "<div class=\"block\">The prefix to apply to each value.  This provides a simple way to make all output values have unique values.</div>",
  "record/!createOverviewMap/input/map/desc" : "<div class=\"block\">The required parameters for the map.</div>",
  "record/!createOverviewMap/input/clientHttpRequestFactory/desc" : "<div class=\"block\">A factory for making http requests.  This is added to the values by the framework and therefore  does not need to be set in configuration</div>",
  "record/!createOverviewMap/input/tempTaskDirectory/desc" : "<div class=\"block\">The path to the temporary directory for the print task.</div>",
  "record/!createOverviewMap/input/overviewMap/desc" : "<div class=\"block\">Optional parameters for the overview map which allow to override  parameters of the main map.</div>",
  "record/!createOverviewMap/output/layerGraphics/desc" : "<div class=\"block\">The paths to a graphic for each layer.</div>",
  "record/!createOverviewMap/output/overviewMapSubReport/desc" : "<div class=\"block\">The path to the compiled sub-report for the overview map.</div>"
}